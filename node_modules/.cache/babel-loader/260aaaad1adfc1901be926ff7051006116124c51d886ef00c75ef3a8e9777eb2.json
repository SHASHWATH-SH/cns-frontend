{"ast":null,"code":"var _jsxFileName = \"E:\\\\secure-p2p-transfer\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { QRCodeCanvas } from 'qrcode.react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [isSender, setIsSender] = useState(null);\n  const [peerId, setPeerId] = useState('');\n  const [generatedId] = useState(uuidv4());\n  const [file, setFile] = useState(null);\n  const [receivedFile, setReceivedFile] = useState(null);\n  const [logs, setLogs] = useState([]);\n  const peerConnection = useRef(null);\n  const dataChannel = useRef(null);\n  const signalingSocket = useRef(null);\n  const appendLog = msg => setLogs(prev => [...prev, msg]);\n  const connectToSignalingServer = () => {\n    signalingSocket.current = new WebSocket('ws://localhost:8080');\n    signalingSocket.current.onopen = () => {\n      appendLog('Connected to signaling server');\n    };\n    signalingSocket.current.onmessage = async message => {\n      const data = JSON.parse(message.data);\n      switch (data.type) {\n        case 'offer':\n          await handleOffer(data.offer, data.from);\n          break;\n        case 'answer':\n          await handleAnswer(data.answer);\n          break;\n        case 'ice-candidate':\n          if (data.candidate && peerConnection.current) {\n            try {\n              await peerConnection.current.addIceCandidate(new RTCIceCandidate(data.candidate));\n              appendLog('ICE candidate added');\n            } catch (err) {\n              appendLog(`Failed to add ICE candidate: ${err.message}`);\n            }\n          }\n          break;\n        default:\n          break;\n      }\n    };\n  };\n  const createPeerConnection = () => {\n    peerConnection.current = new RTCPeerConnection();\n    peerConnection.current.onicecandidate = event => {\n      if (event.candidate && signalingSocket.current && peerId) {\n        signalingSocket.current.send(JSON.stringify({\n          type: 'ice-candidate',\n          candidate: event.candidate,\n          to: peerId\n        }));\n        appendLog('Sent ICE candidate');\n      }\n    };\n    peerConnection.current.onconnectionstatechange = () => {\n      appendLog(`Connection state: ${peerConnection.current.connectionState}`);\n    };\n    peerConnection.current.ondatachannel = event => {\n      dataChannel.current = event.channel;\n      dataChannel.current.onopen = () => appendLog('Data channel open');\n      dataChannel.current.onmessage = event => {\n        const blob = new Blob([event.data]);\n        setReceivedFile(URL.createObjectURL(blob));\n        appendLog('File received');\n      };\n    };\n  };\n  const startSender = async () => {\n    setIsSender(true);\n    connectToSignalingServer();\n    createPeerConnection();\n    dataChannel.current = peerConnection.current.createDataChannel('fileTransfer');\n    dataChannel.current.onopen = () => appendLog('Data channel open');\n    const offer = await peerConnection.current.createOffer();\n    await peerConnection.current.setLocalDescription(offer);\n    signalingSocket.current.send(JSON.stringify({\n      type: 'offer',\n      offer,\n      from: generatedId,\n      to: peerId\n    }));\n    appendLog('Offer sent');\n  };\n  const handleOffer = async (offer, from) => {\n    setPeerId(from);\n    createPeerConnection();\n    await peerConnection.current.setRemoteDescription(new RTCSessionDescription(offer));\n    const answer = await peerConnection.current.createAnswer();\n    await peerConnection.current.setLocalDescription(answer);\n    signalingSocket.current.send(JSON.stringify({\n      type: 'answer',\n      answer,\n      to: from\n    }));\n    appendLog('Answer sent');\n  };\n  const handleAnswer = async answer => {\n    if (peerConnection.current) {\n      await peerConnection.current.setRemoteDescription(new RTCSessionDescription(answer));\n      appendLog('Answer received and set');\n    }\n  };\n  const sendFile = () => {\n    if (dataChannel.current && dataChannel.current.readyState === 'open') {\n      const reader = new FileReader();\n      reader.onload = () => {\n        dataChannel.current.send(reader.result);\n        appendLog('File sent');\n      };\n      reader.readAsArrayBuffer(file);\n    } else {\n      appendLog('Data channel not open');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Secure P2P File Transfer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), isSender === null && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsSender(true),\n        children: \"I'm the Sender\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsSender(false),\n        children: \"I'm the Receiver\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), isSender && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Your ID (share this with receiver): \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: generatedId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 49\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(QRCodeCanvas, {\n        value: generatedId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter receiver ID\",\n        value: peerId,\n        onChange: e => setPeerId(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: e => setFile(e.target.files[0])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startSender,\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendFile,\n        children: \"Send File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), isSender === false && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Your ID (share this with sender): \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: generatedId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 47\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(QRCodeCanvas, {\n        value: generatedId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter sender ID\",\n        value: peerId,\n        onChange: e => setPeerId(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: connectToSignalingServer,\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }, this), receivedFile && /*#__PURE__*/_jsxDEV(\"a\", {\n        href: receivedFile,\n        download: \"received_file\",\n        children: \"Download Received File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'left',\n        marginTop: 20\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Logs:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: logs.join('\\n')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"ZcruI73GDbRqofbiQ9kN7qA+AAs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useRef","useState","v4","uuidv4","QRCodeCanvas","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","isSender","setIsSender","peerId","setPeerId","generatedId","file","setFile","receivedFile","setReceivedFile","logs","setLogs","peerConnection","dataChannel","signalingSocket","appendLog","msg","prev","connectToSignalingServer","current","WebSocket","onopen","onmessage","message","data","JSON","parse","type","handleOffer","offer","from","handleAnswer","answer","candidate","addIceCandidate","RTCIceCandidate","err","createPeerConnection","RTCPeerConnection","onicecandidate","event","send","stringify","to","onconnectionstatechange","connectionState","ondatachannel","channel","blob","Blob","URL","createObjectURL","startSender","createDataChannel","createOffer","setLocalDescription","setRemoteDescription","RTCSessionDescription","createAnswer","sendFile","readyState","reader","FileReader","onload","result","readAsArrayBuffer","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","value","placeholder","onChange","e","target","files","href","download","style","textAlign","marginTop","join","_c","$RefreshReg$"],"sources":["E:/secure-p2p-transfer/frontend/src/App.js"],"sourcesContent":["import React, { useRef, useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { QRCodeCanvas } from 'qrcode.react';\nimport './App.css';\n\nconst App = () => {\n  const [isSender, setIsSender] = useState(null);\n  const [peerId, setPeerId] = useState('');\n  const [generatedId] = useState(uuidv4());\n  const [file, setFile] = useState(null);\n  const [receivedFile, setReceivedFile] = useState(null);\n  const [logs, setLogs] = useState([]);\n\n  const peerConnection = useRef(null);\n  const dataChannel = useRef(null);\n  const signalingSocket = useRef(null);\n\n  const appendLog = (msg) => setLogs((prev) => [...prev, msg]);\n\n  const connectToSignalingServer = () => {\n    signalingSocket.current = new WebSocket('ws://localhost:8080');\n\n    signalingSocket.current.onopen = () => {\n      appendLog('Connected to signaling server');\n    };\n\n    signalingSocket.current.onmessage = async (message) => {\n      const data = JSON.parse(message.data);\n\n      switch (data.type) {\n        case 'offer':\n          await handleOffer(data.offer, data.from);\n          break;\n        case 'answer':\n          await handleAnswer(data.answer);\n          break;\n        case 'ice-candidate':\n          if (data.candidate && peerConnection.current) {\n            try {\n              await peerConnection.current.addIceCandidate(new RTCIceCandidate(data.candidate));\n              appendLog('ICE candidate added');\n            } catch (err) {\n              appendLog(`Failed to add ICE candidate: ${err.message}`);\n            }\n          }\n          break;\n        default:\n          break;\n      }\n    };\n  };\n\n  const createPeerConnection = () => {\n    peerConnection.current = new RTCPeerConnection();\n\n    peerConnection.current.onicecandidate = (event) => {\n      if (event.candidate && signalingSocket.current && peerId) {\n        signalingSocket.current.send(\n          JSON.stringify({\n            type: 'ice-candidate',\n            candidate: event.candidate,\n            to: peerId,\n          })\n        );\n        appendLog('Sent ICE candidate');\n      }\n    };\n\n    peerConnection.current.onconnectionstatechange = () => {\n      appendLog(`Connection state: ${peerConnection.current.connectionState}`);\n    };\n\n    peerConnection.current.ondatachannel = (event) => {\n      dataChannel.current = event.channel;\n\n      dataChannel.current.onopen = () => appendLog('Data channel open');\n      dataChannel.current.onmessage = (event) => {\n        const blob = new Blob([event.data]);\n        setReceivedFile(URL.createObjectURL(blob));\n        appendLog('File received');\n      };\n    };\n  };\n\n  const startSender = async () => {\n    setIsSender(true);\n    connectToSignalingServer();\n    createPeerConnection();\n\n    dataChannel.current = peerConnection.current.createDataChannel('fileTransfer');\n\n    dataChannel.current.onopen = () => appendLog('Data channel open');\n\n    const offer = await peerConnection.current.createOffer();\n    await peerConnection.current.setLocalDescription(offer);\n\n    signalingSocket.current.send(\n      JSON.stringify({\n        type: 'offer',\n        offer,\n        from: generatedId,\n        to: peerId,\n      })\n    );\n\n    appendLog('Offer sent');\n  };\n\n  const handleOffer = async (offer, from) => {\n    setPeerId(from);\n    createPeerConnection();\n    await peerConnection.current.setRemoteDescription(new RTCSessionDescription(offer));\n\n    const answer = await peerConnection.current.createAnswer();\n    await peerConnection.current.setLocalDescription(answer);\n\n    signalingSocket.current.send(\n      JSON.stringify({\n        type: 'answer',\n        answer,\n        to: from,\n      })\n    );\n\n    appendLog('Answer sent');\n  };\n\n  const handleAnswer = async (answer) => {\n    if (peerConnection.current) {\n      await peerConnection.current.setRemoteDescription(new RTCSessionDescription(answer));\n      appendLog('Answer received and set');\n    }\n  };\n\n  const sendFile = () => {\n    if (dataChannel.current && dataChannel.current.readyState === 'open') {\n      const reader = new FileReader();\n      reader.onload = () => {\n        dataChannel.current.send(reader.result);\n        appendLog('File sent');\n      };\n      reader.readAsArrayBuffer(file);\n    } else {\n      appendLog('Data channel not open');\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Secure P2P File Transfer</h1>\n\n      {isSender === null && (\n        <>\n          <button onClick={() => setIsSender(true)}>I'm the Sender</button>\n          <button onClick={() => setIsSender(false)}>I'm the Receiver</button>\n        </>\n      )}\n\n      {isSender && (\n        <>\n          <p>\n            Your ID (share this with receiver): <b>{generatedId}</b>\n          </p>\n          <QRCodeCanvas value={generatedId} />\n          <input\n            type=\"text\"\n            placeholder=\"Enter receiver ID\"\n            value={peerId}\n            onChange={(e) => setPeerId(e.target.value)}\n          />\n          <input type=\"file\" onChange={(e) => setFile(e.target.files[0])} />\n          <button onClick={startSender}>Start</button>\n          <button onClick={sendFile}>Send File</button>\n        </>\n      )}\n\n      {isSender === false && (\n        <>\n          <p>\n            Your ID (share this with sender): <b>{generatedId}</b>\n          </p>\n          <QRCodeCanvas value={generatedId} />\n          <input\n            type=\"text\"\n            placeholder=\"Enter sender ID\"\n            value={peerId}\n            onChange={(e) => setPeerId(e.target.value)}\n          />\n          <button onClick={connectToSignalingServer}>Start</button>\n          {receivedFile && (\n            <a href={receivedFile} download=\"received_file\">\n              Download Received File\n            </a>\n          )}\n        </>\n      )}\n\n      <div style={{ textAlign: 'left', marginTop: 20 }}>\n        <h3>Logs:</h3>\n        <pre>{logs.join('\\n')}</pre>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}