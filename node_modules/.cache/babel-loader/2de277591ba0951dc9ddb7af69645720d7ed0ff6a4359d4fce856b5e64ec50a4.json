{"ast":null,"code":"var _jsxFileName = \"E:\\\\secure-p2p-transfer\\\\frontend\\\\src\\\\components\\\\Sender.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Sender() {\n  _s();\n  const peerRef = useRef(null);\n  const dataChannelRef = useRef(null);\n\n  // Mock function: send signaling data to remote peer (implement your signaling here)\n  const sendSignalingData = data => {\n    console.log(\"Send signaling data:\", data);\n    // Send data via your signaling server or mechanism here\n  };\n  useEffect(() => {\n    // Create new RTCPeerConnection\n    peerRef.current = new RTCPeerConnection({\n      iceServers: [{\n        urls: \"stun:stun.l.google.com:19302\"\n      }]\n    });\n\n    // Create data channel for P2P file/data transfer\n    dataChannelRef.current = peerRef.current.createDataChannel(\"fileTransfer\");\n\n    // Setup onicecandidate handler with defensive check\n    peerRef.current.onicecandidate = event => {\n      if (!peerRef.current || peerRef.current.connectionState === \"closed\") {\n        return; // Don't use a closed peer connection\n      }\n      if (event.candidate) {\n        sendSignalingData({\n          type: \"candidate\",\n          candidate: event.candidate\n        });\n      }\n    };\n    peerRef.current.onconnectionstatechange = () => {\n      console.log(\"Connection state change:\", peerRef.current.connectionState);\n      if (peerRef.current.connectionState === \"failed\" || peerRef.current.connectionState === \"closed\") {\n        cleanup();\n      }\n    };\n\n    // Create offer and set local description\n    peerRef.current.createOffer().then(offer => peerRef.current.setLocalDescription(offer)).then(() => {\n      // Send offer via signaling\n      sendSignalingData({\n        type: \"offer\",\n        sdp: peerRef.current.localDescription\n      });\n    });\n\n    // Cleanup function\n    function cleanup() {\n      if (dataChannelRef.current) {\n        dataChannelRef.current.close();\n        dataChannelRef.current = null;\n      }\n      if (peerRef.current) {\n        peerRef.current.close();\n        peerRef.current = null;\n      }\n    }\n\n    // Cleanup on unmount\n    return () => {\n      cleanup();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Sender Peer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Check console for ICE candidates and connection state logs.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n_s(Sender, \"qx1Zjok9RKUMWmxpWT0y6AE2YkU=\");\n_c = Sender;\nexport default Sender;\nvar _c;\n$RefreshReg$(_c, \"Sender\");","map":{"version":3,"names":["React","useRef","useEffect","useState","jsxDEV","_jsxDEV","Sender","_s","peerRef","dataChannelRef","sendSignalingData","data","console","log","current","RTCPeerConnection","iceServers","urls","createDataChannel","onicecandidate","event","connectionState","candidate","type","onconnectionstatechange","cleanup","createOffer","then","offer","setLocalDescription","sdp","localDescription","close","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/secure-p2p-transfer/frontend/src/components/Sender.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\n\nfunction Sender() {\n  const peerRef = useRef(null);\n  const dataChannelRef = useRef(null);\n\n  // Mock function: send signaling data to remote peer (implement your signaling here)\n  const sendSignalingData = (data) => {\n    console.log(\"Send signaling data:\", data);\n    // Send data via your signaling server or mechanism here\n  };\n\n  useEffect(() => {\n    // Create new RTCPeerConnection\n    peerRef.current = new RTCPeerConnection({\n      iceServers: [{ urls: \"stun:stun.l.google.com:19302\" }],\n    });\n\n    // Create data channel for P2P file/data transfer\n    dataChannelRef.current = peerRef.current.createDataChannel(\"fileTransfer\");\n\n    // Setup onicecandidate handler with defensive check\n    peerRef.current.onicecandidate = (event) => {\n      if (!peerRef.current || peerRef.current.connectionState === \"closed\") {\n        return; // Don't use a closed peer connection\n      }\n\n      if (event.candidate) {\n        sendSignalingData({ type: \"candidate\", candidate: event.candidate });\n      }\n    };\n\n    peerRef.current.onconnectionstatechange = () => {\n      console.log(\"Connection state change:\", peerRef.current.connectionState);\n      if (peerRef.current.connectionState === \"failed\" || peerRef.current.connectionState === \"closed\") {\n        cleanup();\n      }\n    };\n\n    // Create offer and set local description\n    peerRef.current.createOffer()\n      .then(offer => peerRef.current.setLocalDescription(offer))\n      .then(() => {\n        // Send offer via signaling\n        sendSignalingData({ type: \"offer\", sdp: peerRef.current.localDescription });\n      });\n\n    // Cleanup function\n    function cleanup() {\n      if (dataChannelRef.current) {\n        dataChannelRef.current.close();\n        dataChannelRef.current = null;\n      }\n      if (peerRef.current) {\n        peerRef.current.close();\n        peerRef.current = null;\n      }\n    }\n\n    // Cleanup on unmount\n    return () => {\n      cleanup();\n    };\n  }, []);\n\n  return (\n    <div>\n      <h2>Sender Peer</h2>\n      <p>Check console for ICE candidates and connection state logs.</p>\n    </div>\n  );\n}\n\nexport default Sender;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}