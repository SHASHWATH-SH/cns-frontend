{"ast":null,"code":"var _jsxFileName = \"E:\\\\secure-p2p-transfer\\\\frontend\\\\src\\\\Receiver.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SIGNALING_SERVER = \"ws://localhost:8080\";\nfunction randomId() {\n  return Math.random().toString(36).substring(2, 8);\n}\nexport default function Receiver() {\n  _s();\n  const [id] = useState(randomId());\n  const [fileName, setFileName] = useState(null);\n  const [downloadUrl, setDownloadUrl] = useState(null);\n  const ws = useRef(null);\n  const pc = useRef(null);\n  const dc = useRef(null);\n  const receivedBuffers = useRef([]);\n  useEffect(() => {\n    ws.current = new WebSocket(SIGNALING_SERVER);\n    ws.current.onopen = () => {\n      console.log(\"Receiver WebSocket connected\");\n    };\n    ws.current.onmessage = async event => {\n      if (typeof event.data !== \"string\") {\n        console.warn(\"Non-string message on signaling WS ignored\");\n        return;\n      }\n      let message;\n      try {\n        message = JSON.parse(event.data);\n      } catch {\n        console.warn(\"Invalid JSON on signaling WS ignored\");\n        return;\n      }\n      if (message.to !== id) return; // ignore messages not for me\n\n      if (message.sdp) {\n        await pc.current.setRemoteDescription(new RTCSessionDescription(message.sdp));\n        if (message.sdp.type === \"offer\") {\n          const answer = await pc.current.createAnswer();\n          await pc.current.setLocalDescription(answer);\n          sendMessage({\n            sdp: pc.current.localDescription,\n            to: message.from\n          });\n        }\n      } else if (message.candidate) {\n        try {\n          await pc.current.addIceCandidate(new RTCIceCandidate(message.candidate));\n        } catch (e) {\n          console.error(\"Error adding ICE candidate:\", e);\n        }\n      }\n    };\n    ws.current.onerror = err => console.error(\"WebSocket error:\", err);\n    setupPeerConnection();\n    return () => {\n      ws.current.close();\n      if (pc.current) pc.current.close();\n      if (downloadUrl) URL.revokeObjectURL(downloadUrl);\n    };\n  }, [id]);\n  function sendMessage(msg) {\n    msg.from = id;\n    ws.current.send(JSON.stringify(msg));\n  }\n  function setupPeerConnection() {\n    pc.current = new RTCPeerConnection({\n      iceServers: [{\n        urls: \"stun:stun.l.google.com:19302\"\n      }]\n    });\n    pc.current.onicecandidate = event => {\n      if (event.candidate) {\n        sendMessage({\n          candidate: event.candidate,\n          to: \"sender\"\n        });\n      }\n    };\n    pc.current.ondatachannel = event => {\n      dc.current = event.channel;\n      dc.current.binaryType = \"arraybuffer\";\n      receivedBuffers.current = [];\n      dc.current.onopen = () => console.log(\"DataChannel open\");\n      dc.current.onmessage = event => {\n        if (typeof event.data === \"string\") {\n          try {\n            const msg = JSON.parse(event.data);\n            if (msg.done) {\n              // File transfer done, create blob and trigger download\n              const blob = new Blob(receivedBuffers.current);\n              const url = URL.createObjectURL(blob);\n              setDownloadUrl(url);\n              setFileName(msg.fileName);\n              receivedBuffers.current = [];\n              console.log(\"File transfer completed\");\n            }\n          } catch (e) {\n            console.error(\"Failed to parse control message\", e);\n          }\n        } else {\n          // Received a binary chunk\n          receivedBuffers.current.push(event.data);\n          console.log(\"Received chunk size:\", event.data.byteLength);\n        }\n      };\n      dc.current.onclose = () => console.log(\"DataChannel closed\");\n    };\n    pc.current.onconnectionstatechange = () => {\n      console.log(\"Connection state:\", pc.current.connectionState);\n    };\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: 20\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Receiver\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Your ID (share with sender): \", /*#__PURE__*/_jsxDEV(\"b\", {\n        children: id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 39\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), downloadUrl && /*#__PURE__*/_jsxDEV(\"a\", {\n      href: downloadUrl,\n      download: fileName,\n      onClick: () => setDownloadUrl(null),\n      children: [\"Click here to download \", fileName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n}\n_s(Receiver, \"Iznv1BUjL8+f36HZO9RiB1dnEe8=\");\n_c = Receiver;\nvar _c;\n$RefreshReg$(_c, \"Receiver\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","SIGNALING_SERVER","randomId","Math","random","toString","substring","Receiver","_s","id","fileName","setFileName","downloadUrl","setDownloadUrl","ws","pc","dc","receivedBuffers","current","WebSocket","onopen","console","log","onmessage","event","data","warn","message","JSON","parse","to","sdp","setRemoteDescription","RTCSessionDescription","type","answer","createAnswer","setLocalDescription","sendMessage","localDescription","from","candidate","addIceCandidate","RTCIceCandidate","e","error","onerror","err","setupPeerConnection","close","URL","revokeObjectURL","msg","send","stringify","RTCPeerConnection","iceServers","urls","onicecandidate","ondatachannel","channel","binaryType","done","blob","Blob","url","createObjectURL","push","byteLength","onclose","onconnectionstatechange","connectionState","style","padding","children","_jsxFileName","lineNumber","columnNumber","href","download","onClick","_c","$RefreshReg$"],"sources":["E:/secure-p2p-transfer/frontend/src/Receiver.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\n\nconst SIGNALING_SERVER = \"ws://localhost:8080\";\n\nfunction randomId() {\n  return Math.random().toString(36).substring(2, 8);\n}\n\nexport default function Receiver() {\n  const [id] = useState(randomId());\n  const [fileName, setFileName] = useState(null);\n  const [downloadUrl, setDownloadUrl] = useState(null);\n\n  const ws = useRef(null);\n  const pc = useRef(null);\n  const dc = useRef(null);\n  const receivedBuffers = useRef([]);\n\n  useEffect(() => {\n    ws.current = new WebSocket(SIGNALING_SERVER);\n\n    ws.current.onopen = () => {\n      console.log(\"Receiver WebSocket connected\");\n    };\n\n    ws.current.onmessage = async (event) => {\n      if (typeof event.data !== \"string\") {\n        console.warn(\"Non-string message on signaling WS ignored\");\n        return;\n      }\n\n      let message;\n      try {\n        message = JSON.parse(event.data);\n      } catch {\n        console.warn(\"Invalid JSON on signaling WS ignored\");\n        return;\n      }\n\n      if (message.to !== id) return; // ignore messages not for me\n\n      if (message.sdp) {\n        await pc.current.setRemoteDescription(new RTCSessionDescription(message.sdp));\n        if (message.sdp.type === \"offer\") {\n          const answer = await pc.current.createAnswer();\n          await pc.current.setLocalDescription(answer);\n          sendMessage({ sdp: pc.current.localDescription, to: message.from });\n        }\n      } else if (message.candidate) {\n        try {\n          await pc.current.addIceCandidate(new RTCIceCandidate(message.candidate));\n        } catch (e) {\n          console.error(\"Error adding ICE candidate:\", e);\n        }\n      }\n    };\n\n    ws.current.onerror = (err) => console.error(\"WebSocket error:\", err);\n\n    setupPeerConnection();\n\n    return () => {\n      ws.current.close();\n      if (pc.current) pc.current.close();\n      if (downloadUrl) URL.revokeObjectURL(downloadUrl);\n    };\n  }, [id]);\n\n  function sendMessage(msg) {\n    msg.from = id;\n    ws.current.send(JSON.stringify(msg));\n  }\n\n  function setupPeerConnection() {\n    pc.current = new RTCPeerConnection({\n      iceServers: [{ urls: \"stun:stun.l.google.com:19302\" }],\n    });\n\n    pc.current.onicecandidate = (event) => {\n      if (event.candidate) {\n        sendMessage({ candidate: event.candidate, to: \"sender\" });\n      }\n    };\n\n    pc.current.ondatachannel = (event) => {\n      dc.current = event.channel;\n      dc.current.binaryType = \"arraybuffer\";\n      receivedBuffers.current = [];\n\n      dc.current.onopen = () => console.log(\"DataChannel open\");\n\n      dc.current.onmessage = (event) => {\n        if (typeof event.data === \"string\") {\n          try {\n            const msg = JSON.parse(event.data);\n            if (msg.done) {\n              // File transfer done, create blob and trigger download\n              const blob = new Blob(receivedBuffers.current);\n              const url = URL.createObjectURL(blob);\n              setDownloadUrl(url);\n              setFileName(msg.fileName);\n              receivedBuffers.current = [];\n              console.log(\"File transfer completed\");\n            }\n          } catch (e) {\n            console.error(\"Failed to parse control message\", e);\n          }\n        } else {\n          // Received a binary chunk\n          receivedBuffers.current.push(event.data);\n          console.log(\"Received chunk size:\", event.data.byteLength);\n        }\n      };\n\n      dc.current.onclose = () => console.log(\"DataChannel closed\");\n    };\n\n    pc.current.onconnectionstatechange = () => {\n      console.log(\"Connection state:\", pc.current.connectionState);\n    };\n  }\n\n  return (\n    <div style={{ padding: 20 }}>\n      <h2>Receiver</h2>\n      <p>Your ID (share with sender): <b>{id}</b></p>\n      {downloadUrl && (\n        <a href={downloadUrl} download={fileName} onClick={() => setDownloadUrl(null)}>\n          Click here to download {fileName}\n        </a>\n      )}\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}