{"ast":null,"code":"var _jsxFileName = \"E:\\\\secure-p2p-transfer\\\\frontend\\\\src\\\\Sender.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport './Sender.css';\nimport { generateKeyPair, exportPublicKey, importPublicKey, deriveAESKey, encryptData } from './cryptoUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction generateId() {\n  return Math.random().toString(36).slice(2, 8).toUpperCase();\n}\nexport default function Sender() {\n  _s();\n  const [id] = useState(generateId());\n  const [receiverId, setReceiverId] = useState('');\n  const [status, setStatus] = useState('Idle');\n  const pc = useRef(null);\n  const socket = useRef(null);\n  const dc = useRef(null);\n  const fileReader = useRef(null);\n  const aesKey = useRef(null);\n  const localKeyPair = useRef(null);\n  useEffect(() => {\n    socket.current = io('https://192.168.168.36:8080');\n    socket.current.on('connect', () => {\n      socket.current.emit('register', id);\n      setStatus(`Registered as ${id}`);\n    });\n    socket.current.on('signal', async data => {\n      if (data.from !== receiverId) return;\n      if (data.signal.publicKey) {\n        const receiverPub = await importPublicKey(data.signal.publicKey);\n        aesKey.current = await deriveAESKey(localKeyPair.current.privateKey, receiverPub);\n      }\n      if (data.signal.sdp) {\n        await pc.current.setRemoteDescription(new RTCSessionDescription(data.signal));\n        if (data.signal.type === 'offer') {\n          const answer = await pc.current.createAnswer();\n          await pc.current.setLocalDescription(answer);\n          socket.current.emit('signal', {\n            target: receiverId,\n            signal: pc.current.localDescription\n          });\n        }\n      } else if (data.signal.candidate) {\n        await pc.current.addIceCandidate(new RTCIceCandidate(data.signal.candidate));\n      }\n    });\n    return () => socket.current.disconnect();\n  }, [id, receiverId]);\n  const startConnection = async () => {\n    pc.current = new RTCPeerConnection();\n    localKeyPair.current = await generateKeyPair();\n    const pub = await exportPublicKey(localKeyPair.current.publicKey);\n    socket.current.emit('signal', {\n      target: receiverId,\n      signal: {\n        publicKey: pub\n      }\n    });\n    dc.current = pc.current.createDataChannel('fileTransfer');\n    dc.current.onopen = () => setStatus('Data channel open. Ready to send file.');\n    dc.current.onclose = () => setStatus('Data channel closed.');\n    dc.current.onerror = error => console.error('Data channel error:', error);\n    pc.current.onicecandidate = event => {\n      if (event.candidate) {\n        socket.current.emit('signal', {\n          target: receiverId,\n          signal: {\n            candidate: event.candidate\n          }\n        });\n      }\n    };\n    const offer = await pc.current.createOffer();\n    await pc.current.setLocalDescription(offer);\n    socket.current.emit('signal', {\n      target: receiverId,\n      signal: pc.current.localDescription\n    });\n    setStatus('Offer sent.');\n  };\n  const sendFile = file => {\n    const chunkSize = 16384;\n    let offset = 0;\n    fileReader.current = new FileReader();\n    fileReader.current.onload = async e => {\n      const chunk = e.target.result;\n      const {\n        encrypted,\n        iv\n      } = await encryptData(aesKey.current, chunk);\n      dc.current.send(iv);\n      dc.current.send(encrypted);\n      offset += chunk.byteLength;\n      setStatus(`Sending: ${(offset / file.size * 100).toFixed(2)}%`);\n      if (offset < file.size) readSlice(offset);else dc.current.send(JSON.stringify({\n        done: true,\n        fileName: file.name\n      }));\n    };\n    const readSlice = o => {\n      const slice = file.slice(o, o + chunkSize);\n      fileReader.current.readAsArrayBuffer(slice);\n    };\n    readSlice(0);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Sender (Your ID: \", id, \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter Receiver ID\",\n      value: receiverId,\n      onChange: e => setReceiverId(e.target.value.toUpperCase())\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startConnection,\n      disabled: !receiverId,\n      children: \"Connect\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: e => sendFile(e.target.files[0]),\n      disabled: !dc.current || dc.current.readyState !== 'open'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Status: \", status]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n}\n_s(Sender, \"0svoxiKwBn1yawiQgexHh6hSwlE=\");\n_c = Sender;\nvar _c;\n$RefreshReg$(_c, \"Sender\");","map":{"version":3,"names":["React","useState","useRef","useEffect","io","generateKeyPair","exportPublicKey","importPublicKey","deriveAESKey","encryptData","jsxDEV","_jsxDEV","generateId","Math","random","toString","slice","toUpperCase","Sender","_s","id","receiverId","setReceiverId","status","setStatus","pc","socket","dc","fileReader","aesKey","localKeyPair","current","on","emit","data","from","signal","publicKey","receiverPub","privateKey","sdp","setRemoteDescription","RTCSessionDescription","type","answer","createAnswer","setLocalDescription","target","localDescription","candidate","addIceCandidate","RTCIceCandidate","disconnect","startConnection","RTCPeerConnection","pub","createDataChannel","onopen","onclose","onerror","error","console","onicecandidate","event","offer","createOffer","sendFile","file","chunkSize","offset","FileReader","onload","e","chunk","result","encrypted","iv","send","byteLength","size","toFixed","readSlice","JSON","stringify","done","fileName","name","o","readAsArrayBuffer","children","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","onClick","disabled","files","readyState","_c","$RefreshReg$"],"sources":["E:/secure-p2p-transfer/frontend/src/Sender.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport './Sender.css';\nimport {\n  generateKeyPair,\n  exportPublicKey,\n  importPublicKey,\n  deriveAESKey,\n  encryptData\n} from './cryptoUtils';\n\nfunction generateId() {\n  return Math.random().toString(36).slice(2, 8).toUpperCase();\n}\n\nexport default function Sender() {\n  const [id] = useState(generateId());\n  const [receiverId, setReceiverId] = useState('');\n  const [status, setStatus] = useState('Idle');\n  const pc = useRef(null);\n  const socket = useRef(null);\n  const dc = useRef(null);\n  const fileReader = useRef(null);\n  const aesKey = useRef(null);\n  const localKeyPair = useRef(null);\n\n  useEffect(() => {\n    socket.current = io('https://192.168.168.36:8080');\n    socket.current.on('connect', () => {\n      socket.current.emit('register', id);\n      setStatus(`Registered as ${id}`);\n    });\n\n    socket.current.on('signal', async (data) => {\n      if (data.from !== receiverId) return;\n\n      if (data.signal.publicKey) {\n        const receiverPub = await importPublicKey(data.signal.publicKey);\n        aesKey.current = await deriveAESKey(localKeyPair.current.privateKey, receiverPub);\n      }\n\n      if (data.signal.sdp) {\n        await pc.current.setRemoteDescription(new RTCSessionDescription(data.signal));\n        if (data.signal.type === 'offer') {\n          const answer = await pc.current.createAnswer();\n          await pc.current.setLocalDescription(answer);\n          socket.current.emit('signal', {\n            target: receiverId,\n            signal: pc.current.localDescription,\n          });\n        }\n      } else if (data.signal.candidate) {\n        await pc.current.addIceCandidate(new RTCIceCandidate(data.signal.candidate));\n      }\n    });\n\n    return () => socket.current.disconnect();\n  }, [id, receiverId]);\n\n  const startConnection = async () => {\n    pc.current = new RTCPeerConnection();\n    localKeyPair.current = await generateKeyPair();\n    const pub = await exportPublicKey(localKeyPair.current.publicKey);\n\n    socket.current.emit('signal', {\n      target: receiverId,\n      signal: { publicKey: pub },\n    });\n\n    dc.current = pc.current.createDataChannel('fileTransfer');\n\n    dc.current.onopen = () => setStatus('Data channel open. Ready to send file.');\n    dc.current.onclose = () => setStatus('Data channel closed.');\n    dc.current.onerror = (error) => console.error('Data channel error:', error);\n\n    pc.current.onicecandidate = (event) => {\n      if (event.candidate) {\n        socket.current.emit('signal', {\n          target: receiverId,\n          signal: { candidate: event.candidate },\n        });\n      }\n    };\n\n    const offer = await pc.current.createOffer();\n    await pc.current.setLocalDescription(offer);\n    socket.current.emit('signal', {\n      target: receiverId,\n      signal: pc.current.localDescription,\n    });\n    setStatus('Offer sent.');\n  };\n\n  const sendFile = (file) => {\n    const chunkSize = 16384;\n    let offset = 0;\n    fileReader.current = new FileReader();\n\n    fileReader.current.onload = async (e) => {\n      const chunk = e.target.result;\n      const { encrypted, iv } = await encryptData(aesKey.current, chunk);\n      dc.current.send(iv);\n      dc.current.send(encrypted);\n\n      offset += chunk.byteLength;\n      setStatus(`Sending: ${((offset / file.size) * 100).toFixed(2)}%`);\n\n      if (offset < file.size) readSlice(offset);\n      else dc.current.send(JSON.stringify({ done: true, fileName: file.name }));\n    };\n\n    const readSlice = (o) => {\n      const slice = file.slice(o, o + chunkSize);\n      fileReader.current.readAsArrayBuffer(slice);\n    };\n\n    readSlice(0);\n  };\n\n  return (\n    <div>\n      <h2>Sender (Your ID: {id})</h2>\n      <input type=\"text\" placeholder=\"Enter Receiver ID\" value={receiverId} onChange={e => setReceiverId(e.target.value.toUpperCase())} />\n      <button onClick={startConnection} disabled={!receiverId}>Connect</button>\n      <input type=\"file\" onChange={e => sendFile(e.target.files[0])} disabled={!dc.current || dc.current.readyState !== 'open'} />\n      <p>Status: {status}</p>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}