{"ast":null,"code":"var _jsxFileName = \"E:\\\\secure-p2p-transfer\\\\frontend\\\\src\\\\Sender.js\",\n  _s = $RefreshSig$();\n// Sender.js\nimport React, { useState, useRef, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction generateId() {\n  return Math.random().toString(36).slice(2, 8).toUpperCase();\n}\nexport default function Sender() {\n  _s();\n  const [id] = useState(generateId());\n  const [receiverId, setReceiverId] = useState('');\n  const [status, setStatus] = useState('Idle');\n  const pc = useRef(null);\n  const socket = useRef(null);\n  const dc = useRef(null);\n  const fileReader = useRef(null);\n  useEffect(() => {\n    socket.current = io('https://172.17.3.195:8080'); // Use your actual backend IP & port\n    socket.current.on('connect', () => {\n      socket.current.emit('register', id);\n      setStatus(`Registered as ${id}`);\n    });\n    socket.current.on('signal', async data => {\n      if (data.from === receiverId) {\n        if (data.signal.sdp) {\n          await pc.current.setRemoteDescription(new RTCSessionDescription(data.signal));\n          if (data.signal.type === 'offer') {\n            const answer = await pc.current.createAnswer();\n            await pc.current.setLocalDescription(answer);\n            socket.current.emit('signal', {\n              target: receiverId,\n              signal: pc.current.localDescription\n            });\n          }\n        } else if (data.signal.candidate) {\n          try {\n            await pc.current.addIceCandidate(new RTCIceCandidate(data.signal.candidate));\n          } catch (e) {\n            console.error('Error adding ice candidate:', e);\n          }\n        }\n      }\n    });\n    return () => socket.current.disconnect();\n  }, [id, receiverId]);\n  const startConnection = () => {\n    pc.current = new RTCPeerConnection();\n    dc.current = pc.current.createDataChannel('fileTransfer');\n    dc.current.onopen = () => setStatus('Data channel open. Ready to send file.');\n    dc.current.onclose = () => setStatus('Data channel closed.');\n    dc.current.onerror = error => console.error('Data channel error:', error);\n    pc.current.onicecandidate = event => {\n      if (event.candidate) {\n        socket.current.emit('signal', {\n          target: receiverId,\n          signal: {\n            candidate: event.candidate\n          }\n        });\n      }\n    };\n    pc.current.createOffer().then(offer => {\n      return pc.current.setLocalDescription(offer);\n    }).then(() => {\n      socket.current.emit('signal', {\n        target: receiverId,\n        signal: pc.current.localDescription\n      });\n      setStatus('Offer sent to receiver.');\n    });\n  };\n  const sendFile = file => {\n    if (!dc.current || dc.current.readyState !== 'open') {\n      alert('Data channel is not open yet!');\n      return;\n    }\n    const chunkSize = 16384;\n    let offset = 0;\n    fileReader.current = new FileReader();\n    fileReader.current.onload = e => {\n      dc.current.send(e.target.result);\n      offset += e.target.result.byteLength;\n      setStatus(`Sending: ${Math.min(100, (offset / file.size * 100).toFixed(2))}%`);\n      if (offset < file.size) {\n        readSlice(offset);\n      } else {\n        dc.current.send(JSON.stringify({\n          done: true,\n          fileName: file.name\n        }));\n        setStatus('File sent.');\n      }\n    };\n    const readSlice = o => {\n      const slice = file.slice(o, o + chunkSize);\n      fileReader.current.readAsArrayBuffer(slice);\n    };\n    readSlice(0);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Sender (Your ID: \", id, \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter Receiver ID\",\n      value: receiverId,\n      onChange: e => setReceiverId(e.target.value.toUpperCase())\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startConnection,\n      disabled: !receiverId,\n      children: \"Connect\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: e => sendFile(e.target.files[0]),\n      disabled: !dc.current || dc.current.readyState !== 'open'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Status: \", status]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n}\n_s(Sender, \"rKU05fBW3InPiq9kYk8JyGRnr2A=\");\n_c = Sender;\nvar _c;\n$RefreshReg$(_c, \"Sender\");","map":{"version":3,"names":["React","useState","useRef","useEffect","io","jsxDEV","_jsxDEV","generateId","Math","random","toString","slice","toUpperCase","Sender","_s","id","receiverId","setReceiverId","status","setStatus","pc","socket","dc","fileReader","current","on","emit","data","from","signal","sdp","setRemoteDescription","RTCSessionDescription","type","answer","createAnswer","setLocalDescription","target","localDescription","candidate","addIceCandidate","RTCIceCandidate","e","console","error","disconnect","startConnection","RTCPeerConnection","createDataChannel","onopen","onclose","onerror","onicecandidate","event","createOffer","then","offer","sendFile","file","readyState","alert","chunkSize","offset","FileReader","onload","send","result","byteLength","min","size","toFixed","readSlice","JSON","stringify","done","fileName","name","o","readAsArrayBuffer","children","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","onClick","disabled","files","_c","$RefreshReg$"],"sources":["E:/secure-p2p-transfer/frontend/src/Sender.js"],"sourcesContent":["// Sender.js\nimport React, { useState, useRef, useEffect } from 'react';\nimport { io } from 'socket.io-client';\n\nfunction generateId() {\n  return Math.random().toString(36).slice(2, 8).toUpperCase();\n}\n\nexport default function Sender() {\n  const [id] = useState(generateId());\n  const [receiverId, setReceiverId] = useState('');\n  const [status, setStatus] = useState('Idle');\n  const pc = useRef(null);\n  const socket = useRef(null);\n  const dc = useRef(null);\n  const fileReader = useRef(null);\n\n  useEffect(() => {\n    socket.current = io('https://172.17.3.195:8080'); // Use your actual backend IP & port\n    socket.current.on('connect', () => {\n      socket.current.emit('register', id);\n      setStatus(`Registered as ${id}`);\n    });\n\n    socket.current.on('signal', async (data) => {\n      if (data.from === receiverId) {\n        if (data.signal.sdp) {\n          await pc.current.setRemoteDescription(new RTCSessionDescription(data.signal));\n          if (data.signal.type === 'offer') {\n            const answer = await pc.current.createAnswer();\n            await pc.current.setLocalDescription(answer);\n            socket.current.emit('signal', {\n              target: receiverId,\n              signal: pc.current.localDescription,\n            });\n          }\n        } else if (data.signal.candidate) {\n          try {\n            await pc.current.addIceCandidate(new RTCIceCandidate(data.signal.candidate));\n          } catch (e) {\n            console.error('Error adding ice candidate:', e);\n          }\n        }\n      }\n    });\n\n    return () => socket.current.disconnect();\n  }, [id, receiverId]);\n\n  const startConnection = () => {\n    pc.current = new RTCPeerConnection();\n\n    dc.current = pc.current.createDataChannel('fileTransfer');\n\n    dc.current.onopen = () => setStatus('Data channel open. Ready to send file.');\n    dc.current.onclose = () => setStatus('Data channel closed.');\n    dc.current.onerror = (error) => console.error('Data channel error:', error);\n\n    pc.current.onicecandidate = (event) => {\n      if (event.candidate) {\n        socket.current.emit('signal', {\n          target: receiverId,\n          signal: { candidate: event.candidate },\n        });\n      }\n    };\n\n    pc.current.createOffer().then(offer => {\n      return pc.current.setLocalDescription(offer);\n    }).then(() => {\n      socket.current.emit('signal', {\n        target: receiverId,\n        signal: pc.current.localDescription,\n      });\n      setStatus('Offer sent to receiver.');\n    });\n  };\n\n  const sendFile = (file) => {\n    if (!dc.current || dc.current.readyState !== 'open') {\n      alert('Data channel is not open yet!');\n      return;\n    }\n\n    const chunkSize = 16384;\n    let offset = 0;\n\n    fileReader.current = new FileReader();\n\n    fileReader.current.onload = (e) => {\n      dc.current.send(e.target.result);\n      offset += e.target.result.byteLength;\n      setStatus(`Sending: ${Math.min(100, ((offset / file.size) * 100).toFixed(2))}%`);\n\n      if (offset < file.size) {\n        readSlice(offset);\n      } else {\n        dc.current.send(JSON.stringify({ done: true, fileName: file.name }));\n        setStatus('File sent.');\n      }\n    };\n\n    const readSlice = (o) => {\n      const slice = file.slice(o, o + chunkSize);\n      fileReader.current.readAsArrayBuffer(slice);\n    };\n\n    readSlice(0);\n  };\n\n  return (\n    <div>\n      <h2>Sender (Your ID: {id})</h2>\n      <input\n        type=\"text\"\n        placeholder=\"Enter Receiver ID\"\n        value={receiverId}\n        onChange={(e) => setReceiverId(e.target.value.toUpperCase())}\n      />\n      <button onClick={startConnection} disabled={!receiverId}>Connect</button>\n      <br />\n      <input\n        type=\"file\"\n        onChange={e => sendFile(e.target.files[0])}\n        disabled={!dc.current || dc.current.readyState !== 'open'}\n      />\n      <p>Status: {status}</p>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}