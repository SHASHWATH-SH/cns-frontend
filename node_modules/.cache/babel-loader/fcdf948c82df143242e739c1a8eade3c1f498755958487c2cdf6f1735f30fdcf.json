{"ast":null,"code":"var _jsxFileName = \"E:\\\\secure-p2p-transfer\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport QRCode from 'qrcode.react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SIGNALING_SERVER_URL = 'ws://localhost:8080';\nfunction App() {\n  _s();\n  const [ws, setWs] = useState(null);\n  const [peerConnection, setPeerConnection] = useState(null);\n  const [localId, setLocalId] = useState('');\n  const [remoteId, setRemoteId] = useState('');\n  const [role, setRole] = useState('');\n  const [qrValue, setQrValue] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [file, setFile] = useState(null);\n  const dataChannelRef = useRef(null);\n\n  // Setup WebSocket signaling\n  useEffect(() => {\n    if (!localId) return;\n    const socket = new WebSocket(SIGNALING_SERVER_URL);\n    socket.onopen = () => {\n      socket.send(JSON.stringify({\n        type: 'register',\n        id: localId\n      }));\n      logMsg('Connected to signaling server');\n    };\n    socket.onmessage = async event => {\n      const msg = JSON.parse(event.data);\n      if (msg.from === localId) return; // Ignore own messages\n\n      if (msg.type === 'offer' && role === 'receiver') {\n        await handleOffer(msg);\n      } else if (msg.type === 'answer' && role === 'sender') {\n        await handleAnswer(msg);\n      } else if (msg.type === 'ice-candidate') {\n        if (peerConnection) {\n          try {\n            await peerConnection.addIceCandidate(msg.data);\n            logMsg('Added ICE candidate');\n          } catch (e) {\n            console.error(e);\n          }\n        }\n      }\n    };\n    setWs(socket);\n    return () => {\n      socket.close();\n    };\n  }, [localId, role, peerConnection]);\n\n  // Create new RTCPeerConnection and setup handlers\n  const createPeerConnection = () => {\n    const pc = new RTCPeerConnection({\n      iceServers: [{\n        urls: 'stun:stun.l.google.com:19302'\n      }]\n    });\n    pc.onicecandidate = event => {\n      if (event.candidate) {\n        ws.send(JSON.stringify({\n          type: 'ice-candidate',\n          from: localId,\n          to: remoteId,\n          data: event.candidate\n        }));\n        logMsg('Sent ICE candidate');\n      }\n    };\n    pc.onconnectionstatechange = () => {\n      logMsg('Connection state: ' + pc.connectionState);\n    };\n    return pc;\n  };\n\n  // Handle file input change\n  const onFileChange = e => {\n    setFile(e.target.files[0]);\n  };\n\n  // For Sender role: create offer and data channel\n  const startSender = async () => {\n    if (!remoteId) {\n      alert('Please enter receiver ID');\n      return;\n    }\n    const pc = createPeerConnection();\n    const dc = pc.createDataChannel('fileChannel');\n    dataChannelRef.current = dc;\n    dc.onopen = () => {\n      logMsg('Data channel open');\n      if (file) {\n        sendFile(file);\n      }\n    };\n    dc.onclose = () => logMsg('Data channel closed');\n    dc.onerror = err => logMsg('Data channel error: ' + err);\n    pc.ondatachannel = e => {\n      logMsg('Data channel event (sender got datachannel) ' + e.channel.label);\n    };\n    const offer = await pc.createOffer();\n    await pc.setLocalDescription(offer);\n    ws.send(JSON.stringify({\n      type: 'offer',\n      from: localId,\n      to: remoteId,\n      data: offer\n    }));\n    setPeerConnection(pc);\n    logMsg('Offer sent');\n  };\n\n  // For Receiver role: handle offer and create answer\n  const handleOffer = async msg => {\n    const pc = createPeerConnection();\n    pc.ondatachannel = event => {\n      const dc = event.channel;\n      dataChannelRef.current = dc;\n      dc.binaryType = 'arraybuffer';\n      let receivedBuffers = [];\n      dc.onmessage = e => {\n        receivedBuffers.push(e.data);\n        logMsg(`Received chunk (${e.data.byteLength} bytes)`);\n      };\n      dc.onclose = () => {\n        logMsg('Data channel closed, assembling file');\n        const received = new Blob(receivedBuffers);\n        const a = document.createElement('a');\n        a.href = URL.createObjectURL(received);\n        a.download = 'received_file';\n        a.click();\n        receivedBuffers = [];\n      };\n    };\n    await pc.setRemoteDescription(new RTCSessionDescription(msg.data));\n    const answer = await pc.createAnswer();\n    await pc.setLocalDescription(answer);\n    ws.send(JSON.stringify({\n      type: 'answer',\n      from: localId,\n      to: msg.from,\n      data: answer\n    }));\n    setPeerConnection(pc);\n    setRemoteId(msg.from);\n    logMsg('Answer sent');\n  };\n\n  // For Sender: handle answer\n  const handleAnswer = async msg => {\n    if (!peerConnection) return;\n    await peerConnection.setRemoteDescription(new RTCSessionDescription(msg.data));\n    logMsg('Answer received and set');\n  };\n\n  // Send file over datachannel in chunks\n  const sendFile = file => {\n    const chunkSize = 16384;\n    let offset = 0;\n    const dc = dataChannelRef.current;\n    const reader = new FileReader();\n    reader.onload = e => {\n      if (!dc || dc.readyState !== 'open') {\n        logMsg('Data channel not open');\n        return;\n      }\n      dc.send(e.target.result);\n      offset += e.target.result.byteLength;\n      logMsg(`Sent ${offset} bytes`);\n      if (offset < file.size) {\n        readSlice(offset);\n      } else {\n        logMsg('File sent!');\n      }\n    };\n    const readSlice = o => {\n      const slice = file.slice(o, o + chunkSize);\n      reader.readAsArrayBuffer(slice);\n    };\n    readSlice(0);\n  };\n\n  // Logging helper\n  const logMsg = msg => {\n    setMessages(msgs => [...msgs, msg]);\n    console.log(msg);\n  };\n\n  // On app load: generate random localId if none\n  useEffect(() => {\n    setLocalId(uuidv4());\n  }, []);\n\n  // Generate QR code for your own id to share with other\n  useEffect(() => {\n    if (localId) setQrValue(localId);\n  }, [localId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: 20\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Secure P2P File Transfer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this), !role && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setRole('sender'),\n        children: \"I'm Sender\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 11\n      }, this), ' ', /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setRole('receiver'),\n        children: \"I'm Receiver\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 9\n    }, this), role && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Your ID (share this with other): \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: localId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 46\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(QRCode, {\n        value: qrValue,\n        size: 128\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: 20\n        },\n        children: [role === 'sender' && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Enter receiver ID\",\n            value: remoteId,\n            onChange: e => setRemoteId(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            onChange: onFileChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: startSender,\n            children: \"Send File\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true), role === 'receiver' && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Waiting for sender to connect...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: 20\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Messages\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: msg\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 226,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"O/csKErz35Wq5u3/GWLOatWe4PU=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","QRCode","v4","uuidv4","jsxDEV","_jsxDEV","Fragment","_Fragment","SIGNALING_SERVER_URL","App","_s","ws","setWs","peerConnection","setPeerConnection","localId","setLocalId","remoteId","setRemoteId","role","setRole","qrValue","setQrValue","messages","setMessages","file","setFile","dataChannelRef","socket","WebSocket","onopen","send","JSON","stringify","type","id","logMsg","onmessage","event","msg","parse","data","from","handleOffer","handleAnswer","addIceCandidate","e","console","error","close","createPeerConnection","pc","RTCPeerConnection","iceServers","urls","onicecandidate","candidate","to","onconnectionstatechange","connectionState","onFileChange","target","files","startSender","alert","dc","createDataChannel","current","sendFile","onclose","onerror","err","ondatachannel","channel","label","offer","createOffer","setLocalDescription","binaryType","receivedBuffers","push","byteLength","received","Blob","a","document","createElement","href","URL","createObjectURL","download","click","setRemoteDescription","RTCSessionDescription","answer","createAnswer","chunkSize","offset","reader","FileReader","onload","readyState","result","size","readSlice","o","slice","readAsArrayBuffer","msgs","log","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","value","marginTop","placeholder","onChange","map","index","_c","$RefreshReg$"],"sources":["E:/secure-p2p-transfer/frontend/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport QRCode from 'qrcode.react';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst SIGNALING_SERVER_URL = 'ws://localhost:8080';\n\nfunction App() {\n  const [ws, setWs] = useState(null);\n  const [peerConnection, setPeerConnection] = useState(null);\n  const [localId, setLocalId] = useState('');\n  const [remoteId, setRemoteId] = useState('');\n  const [role, setRole] = useState('');\n  const [qrValue, setQrValue] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [file, setFile] = useState(null);\n  const dataChannelRef = useRef(null);\n\n  // Setup WebSocket signaling\n  useEffect(() => {\n    if (!localId) return;\n    const socket = new WebSocket(SIGNALING_SERVER_URL);\n    socket.onopen = () => {\n      socket.send(JSON.stringify({ type: 'register', id: localId }));\n      logMsg('Connected to signaling server');\n    };\n    socket.onmessage = async (event) => {\n      const msg = JSON.parse(event.data);\n      if (msg.from === localId) return; // Ignore own messages\n\n      if (msg.type === 'offer' && role === 'receiver') {\n        await handleOffer(msg);\n      } else if (msg.type === 'answer' && role === 'sender') {\n        await handleAnswer(msg);\n      } else if (msg.type === 'ice-candidate') {\n        if (peerConnection) {\n          try {\n            await peerConnection.addIceCandidate(msg.data);\n            logMsg('Added ICE candidate');\n          } catch (e) {\n            console.error(e);\n          }\n        }\n      }\n    };\n    setWs(socket);\n\n    return () => {\n      socket.close();\n    };\n  }, [localId, role, peerConnection]);\n\n  // Create new RTCPeerConnection and setup handlers\n  const createPeerConnection = () => {\n    const pc = new RTCPeerConnection({\n      iceServers: [{ urls: 'stun:stun.l.google.com:19302' }],\n    });\n\n    pc.onicecandidate = (event) => {\n      if (event.candidate) {\n        ws.send(\n          JSON.stringify({\n            type: 'ice-candidate',\n            from: localId,\n            to: remoteId,\n            data: event.candidate,\n          })\n        );\n        logMsg('Sent ICE candidate');\n      }\n    };\n\n    pc.onconnectionstatechange = () => {\n      logMsg('Connection state: ' + pc.connectionState);\n    };\n\n    return pc;\n  };\n\n  // Handle file input change\n  const onFileChange = (e) => {\n    setFile(e.target.files[0]);\n  };\n\n  // For Sender role: create offer and data channel\n  const startSender = async () => {\n    if (!remoteId) {\n      alert('Please enter receiver ID');\n      return;\n    }\n    const pc = createPeerConnection();\n\n    const dc = pc.createDataChannel('fileChannel');\n    dataChannelRef.current = dc;\n\n    dc.onopen = () => {\n      logMsg('Data channel open');\n      if (file) {\n        sendFile(file);\n      }\n    };\n    dc.onclose = () => logMsg('Data channel closed');\n    dc.onerror = (err) => logMsg('Data channel error: ' + err);\n\n    pc.ondatachannel = (e) => {\n      logMsg('Data channel event (sender got datachannel) ' + e.channel.label);\n    };\n\n    const offer = await pc.createOffer();\n    await pc.setLocalDescription(offer);\n\n    ws.send(\n      JSON.stringify({\n        type: 'offer',\n        from: localId,\n        to: remoteId,\n        data: offer,\n      })\n    );\n\n    setPeerConnection(pc);\n    logMsg('Offer sent');\n  };\n\n  // For Receiver role: handle offer and create answer\n  const handleOffer = async (msg) => {\n    const pc = createPeerConnection();\n\n    pc.ondatachannel = (event) => {\n      const dc = event.channel;\n      dataChannelRef.current = dc;\n\n      dc.binaryType = 'arraybuffer';\n\n      let receivedBuffers = [];\n      dc.onmessage = (e) => {\n        receivedBuffers.push(e.data);\n        logMsg(`Received chunk (${e.data.byteLength} bytes)`);\n      };\n      dc.onclose = () => {\n        logMsg('Data channel closed, assembling file');\n        const received = new Blob(receivedBuffers);\n        const a = document.createElement('a');\n        a.href = URL.createObjectURL(received);\n        a.download = 'received_file';\n        a.click();\n        receivedBuffers = [];\n      };\n    };\n\n    await pc.setRemoteDescription(new RTCSessionDescription(msg.data));\n    const answer = await pc.createAnswer();\n    await pc.setLocalDescription(answer);\n\n    ws.send(\n      JSON.stringify({\n        type: 'answer',\n        from: localId,\n        to: msg.from,\n        data: answer,\n      })\n    );\n\n    setPeerConnection(pc);\n    setRemoteId(msg.from);\n    logMsg('Answer sent');\n  };\n\n  // For Sender: handle answer\n  const handleAnswer = async (msg) => {\n    if (!peerConnection) return;\n    await peerConnection.setRemoteDescription(new RTCSessionDescription(msg.data));\n    logMsg('Answer received and set');\n  };\n\n  // Send file over datachannel in chunks\n  const sendFile = (file) => {\n    const chunkSize = 16384;\n    let offset = 0;\n    const dc = dataChannelRef.current;\n\n    const reader = new FileReader();\n\n    reader.onload = (e) => {\n      if (!dc || dc.readyState !== 'open') {\n        logMsg('Data channel not open');\n        return;\n      }\n\n      dc.send(e.target.result);\n\n      offset += e.target.result.byteLength;\n      logMsg(`Sent ${offset} bytes`);\n\n      if (offset < file.size) {\n        readSlice(offset);\n      } else {\n        logMsg('File sent!');\n      }\n    };\n\n    const readSlice = (o) => {\n      const slice = file.slice(o, o + chunkSize);\n      reader.readAsArrayBuffer(slice);\n    };\n\n    readSlice(0);\n  };\n\n  // Logging helper\n  const logMsg = (msg) => {\n    setMessages((msgs) => [...msgs, msg]);\n    console.log(msg);\n  };\n\n  // On app load: generate random localId if none\n  useEffect(() => {\n    setLocalId(uuidv4());\n  }, []);\n\n  // Generate QR code for your own id to share with other\n  useEffect(() => {\n    if (localId) setQrValue(localId);\n  }, [localId]);\n\n  return (\n    <div style={{ padding: 20 }}>\n      <h2>Secure P2P File Transfer</h2>\n\n      {!role && (\n        <div>\n          <button onClick={() => setRole('sender')}>I'm Sender</button>{' '}\n          <button onClick={() => setRole('receiver')}>I'm Receiver</button>\n        </div>\n      )}\n\n      {role && (\n        <>\n          <p>\n            Your ID (share this with other): <b>{localId}</b>\n          </p>\n          <QRCode value={qrValue} size={128} />\n\n          <div style={{ marginTop: 20 }}>\n            {role === 'sender' && (\n              <>\n                <input\n                  type=\"text\"\n                  placeholder=\"Enter receiver ID\"\n                  value={remoteId}\n                  onChange={(e) => setRemoteId(e.target.value)}\n                />\n                <input type=\"file\" onChange={onFileChange} />\n                <button onClick={startSender}>Send File</button>\n              </>\n            )}\n            {role === 'receiver' && (\n              <p>Waiting for sender to connect...</p>\n            )}\n          </div>\n          <div style={{ marginTop: 20 }}>\n            <h3>Messages</h3>\n            <ul>\n              {messages.map((msg, index) => (\n                <li key={index}>{msg}</li>\n              ))}\n            </ul>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}