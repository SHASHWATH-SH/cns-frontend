{"ast":null,"code":"var _jsxFileName = \"E:\\\\secure-p2p-transfer\\\\frontend\\\\src\\\\Receiver.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { createPeerConnection, SIGNAL_SERVER } from './utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Receiver() {\n  _s();\n  const [myId] = useState(Math.random().toString(36).substring(2, 8));\n  const [senderId, setSenderId] = useState('');\n  const [status, setStatus] = useState('Waiting for offer...');\n  const wsRef = useRef(null);\n  const peerRef = useRef(null);\n  const receivedChunks = useRef([]);\n  const fileNameRef = useRef(\"received_file\");\n  useEffect(() => {\n    const ws = new WebSocket(SIGNAL_SERVER);\n    wsRef.current = ws;\n    ws.onopen = () => {\n      console.log('Connected to signaling server');\n    };\n    ws.onmessage = async message => {\n      const data = JSON.parse(message.data);\n      if (!peerRef.current) {\n        peerRef.current = new RTCPeerConnection({\n          iceServers: [{\n            urls: 'stun:stun.l.google.com:19302'\n          }]\n        });\n        peerRef.current.onicecandidate = e => {\n          if (e.candidate) {\n            ws.send(JSON.stringify({\n              from: myId,\n              to: data.from,\n              ice: e.candidate\n            }));\n          }\n        };\n        peerRef.current.ondatachannel = event => {\n          const receiveChannel = event.channel;\n          receiveChannel.binaryType = 'arraybuffer';\n          receiveChannel.onmessage = e => {\n            if (typeof e.data === 'string' && e.data.startsWith('FILENAME:')) {\n              fileNameRef.current = e.data.replace('FILENAME:', '');\n              console.log('Receiving file:', fileNameRef.current);\n            } else {\n              receivedChunks.current.push(e.data);\n              console.log('Chunk received');\n\n              // Optionally check if file is done\n              // if last chunk is sent with special marker, implement logic\n            }\n          };\n          receiveChannel.onclose = () => {\n            console.log('Transfer complete');\n            downloadFile();\n          };\n        };\n      }\n      if (data.offer) {\n        setSenderId(data.from);\n        await peerRef.current.setRemoteDescription(new RTCSessionDescription(data.offer));\n        const answer = await peerRef.current.createAnswer();\n        await peerRef.current.setLocalDescription(answer);\n        ws.send(JSON.stringify({\n          from: myId,\n          to: data.from,\n          answer\n        }));\n        setStatus('Answer sent. Waiting for file...');\n      }\n      if (data.ice) {\n        await peerRef.current.addIceCandidate(data.ice);\n      }\n    };\n  }, [myId]);\n  function downloadFile() {\n    const blob = new Blob(receivedChunks.current);\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = fileNameRef.current || 'download.bin';\n    document.body.appendChild(a);\n    a.click();\n    URL.revokeObjectURL(url);\n    receivedChunks.current = [];\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Receiver\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Your ID: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: myId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Status: \", status]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Sender ID: \", senderId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n_s(Receiver, \"IlETXLLINlfP0nxwhaVIQRNVqeU=\");\n_c = Receiver;\nexport default Receiver;\nvar _c;\n$RefreshReg$(_c, \"Receiver\");","map":{"version":3,"names":["React","useEffect","useRef","useState","createPeerConnection","SIGNAL_SERVER","jsxDEV","_jsxDEV","Receiver","_s","myId","Math","random","toString","substring","senderId","setSenderId","status","setStatus","wsRef","peerRef","receivedChunks","fileNameRef","ws","WebSocket","current","onopen","console","log","onmessage","message","data","JSON","parse","RTCPeerConnection","iceServers","urls","onicecandidate","e","candidate","send","stringify","from","to","ice","ondatachannel","event","receiveChannel","channel","binaryType","startsWith","replace","push","onclose","downloadFile","offer","setRemoteDescription","RTCSessionDescription","answer","createAnswer","setLocalDescription","addIceCandidate","blob","Blob","url","URL","createObjectURL","a","document","createElement","href","download","body","appendChild","click","revokeObjectURL","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/secure-p2p-transfer/frontend/src/Receiver.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { createPeerConnection, SIGNAL_SERVER } from './utils';\n\nfunction Receiver() {\n  const [myId] = useState(Math.random().toString(36).substring(2, 8));\n  const [senderId, setSenderId] = useState('');\n  const [status, setStatus] = useState('Waiting for offer...');\n  const wsRef = useRef(null);\n  const peerRef = useRef(null);\n  const receivedChunks = useRef([]);\n  const fileNameRef = useRef(\"received_file\");\n\n  useEffect(() => {\n    const ws = new WebSocket(SIGNAL_SERVER);\n    wsRef.current = ws;\n\n    ws.onopen = () => {\n      console.log('Connected to signaling server');\n    };\n\n    ws.onmessage = async (message) => {\n      const data = JSON.parse(message.data);\n\n      if (!peerRef.current) {\n        peerRef.current = new RTCPeerConnection({\n          iceServers: [{ urls: 'stun:stun.l.google.com:19302' }],\n        });\n\n        peerRef.current.onicecandidate = (e) => {\n          if (e.candidate) {\n            ws.send(JSON.stringify({\n              from: myId,\n              to: data.from,\n              ice: e.candidate\n            }));\n          }\n        };\n\n        peerRef.current.ondatachannel = (event) => {\n          const receiveChannel = event.channel;\n          receiveChannel.binaryType = 'arraybuffer';\n\n          receiveChannel.onmessage = (e) => {\n            if (typeof e.data === 'string' && e.data.startsWith('FILENAME:')) {\n              fileNameRef.current = e.data.replace('FILENAME:', '');\n              console.log('Receiving file:', fileNameRef.current);\n            } else {\n              receivedChunks.current.push(e.data);\n              console.log('Chunk received');\n\n              // Optionally check if file is done\n              // if last chunk is sent with special marker, implement logic\n            }\n          };\n\n          receiveChannel.onclose = () => {\n            console.log('Transfer complete');\n            downloadFile();\n          };\n        };\n      }\n\n      if (data.offer) {\n        setSenderId(data.from);\n        await peerRef.current.setRemoteDescription(new RTCSessionDescription(data.offer));\n        const answer = await peerRef.current.createAnswer();\n        await peerRef.current.setLocalDescription(answer);\n        ws.send(JSON.stringify({ from: myId, to: data.from, answer }));\n        setStatus('Answer sent. Waiting for file...');\n      }\n\n      if (data.ice) {\n        await peerRef.current.addIceCandidate(data.ice);\n      }\n    };\n  }, [myId]);\n\n  function downloadFile() {\n    const blob = new Blob(receivedChunks.current);\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = fileNameRef.current || 'download.bin';\n    document.body.appendChild(a);\n    a.click();\n    URL.revokeObjectURL(url);\n    receivedChunks.current = [];\n  }\n\n  return (\n    <div>\n      <h2>Receiver</h2>\n      <p>Your ID: <strong>{myId}</strong></p>\n      <p>Status: {status}</p>\n      <p>Sender ID: {senderId}</p>\n    </div>\n  );\n}\n\nexport default Receiver;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}