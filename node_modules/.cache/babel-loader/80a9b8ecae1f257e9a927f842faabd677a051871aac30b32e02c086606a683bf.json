{"ast":null,"code":"var _jsxFileName = \"E:\\\\secure-p2p-transfer\\\\frontend\\\\src\\\\Receiver.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Receiver = () => {\n  _s();\n  const ws = useRef(null);\n  const pc = useRef(null);\n  const [receivedBlob, setReceivedBlob] = useState(null);\n  useEffect(() => {\n    // Connect to signaling server\n    ws.current = new WebSocket('wss://localhost:8080');\n    ws.current.onerror = err => {\n      console.error(\"WebSocket error:\", err);\n    };\n    ws.current.onopen = () => {\n      console.log(\"WebSocket connected\");\n    };\n    ws.current.onmessage = async event => {\n      let data;\n      try {\n        data = JSON.parse(event.data);\n      } catch (err) {\n        console.warn(\"Received non-JSON message, ignoring:\", event.data);\n        return;\n      }\n      if (!pc.current) {\n        setupPeerConnection();\n      }\n      if (data.type === 'offer') {\n        await pc.current.setRemoteDescription(new RTCSessionDescription(data.offer));\n        const answer = await pc.current.createAnswer();\n        await pc.current.setLocalDescription(answer);\n        ws.current.send(JSON.stringify({\n          type: 'answer',\n          answer\n        }));\n      } else if (data.type === 'candidate') {\n        try {\n          await pc.current.addIceCandidate(new RTCIceCandidate(data.candidate));\n        } catch (err) {\n          console.error(\"Error adding ICE candidate:\", err);\n        }\n      }\n    };\n    return () => {\n      var _ws$current, _pc$current;\n      (_ws$current = ws.current) === null || _ws$current === void 0 ? void 0 : _ws$current.close();\n      (_pc$current = pc.current) === null || _pc$current === void 0 ? void 0 : _pc$current.close();\n    };\n  }, []);\n  const setupPeerConnection = () => {\n    pc.current = new RTCPeerConnection();\n    pc.current.onicecandidate = event => {\n      if (event.candidate) {\n        ws.current.send(JSON.stringify({\n          type: 'candidate',\n          candidate: event.candidate\n        }));\n      }\n    };\n    pc.current.ondatachannel = event => {\n      const receiveChannel = event.channel;\n      const chunks = [];\n      receiveChannel.onmessage = e => {\n        console.log(\"Received data:\", e.data);\n        chunks.push(e.data);\n      };\n      receiveChannel.onopen = () => {\n        console.log(\"Data channel open\");\n      };\n      receiveChannel.onclose = () => {\n        console.log(\"Data channel closed\");\n        const blob = new Blob(chunks);\n        setReceivedBlob(blob);\n      };\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Receiver\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), receivedBlob && /*#__PURE__*/_jsxDEV(\"a\", {\n      href: URL.createObjectURL(receivedBlob),\n      download: \"received_file\",\n      children: \"Download Received File\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(Receiver, \"fY4tYwodhFedDtGl8x7jBZmGyUQ=\");\n_c = Receiver;\nexport default Receiver;\nvar _c;\n$RefreshReg$(_c, \"Receiver\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","Receiver","_s","ws","pc","receivedBlob","setReceivedBlob","current","WebSocket","onerror","err","console","error","onopen","log","onmessage","event","data","JSON","parse","warn","setupPeerConnection","type","setRemoteDescription","RTCSessionDescription","offer","answer","createAnswer","setLocalDescription","send","stringify","addIceCandidate","RTCIceCandidate","candidate","_ws$current","_pc$current","close","RTCPeerConnection","onicecandidate","ondatachannel","receiveChannel","channel","chunks","e","push","onclose","blob","Blob","children","fileName","_jsxFileName","lineNumber","columnNumber","href","URL","createObjectURL","download","_c","$RefreshReg$"],"sources":["E:/secure-p2p-transfer/frontend/src/Receiver.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\nconst Receiver = () => {\n  const ws = useRef(null);\n  const pc = useRef(null);\n  const [receivedBlob, setReceivedBlob] = useState(null);\n\n  useEffect(() => {\n    // Connect to signaling server\n    ws.current = new WebSocket('wss://localhost:8080');\n\n    ws.current.onerror = (err) => {\n      console.error(\"WebSocket error:\", err);\n    };\n\n    ws.current.onopen = () => {\n      console.log(\"WebSocket connected\");\n    };\n\n    ws.current.onmessage = async (event) => {\n      let data;\n      try {\n        data = JSON.parse(event.data);\n      } catch (err) {\n        console.warn(\"Received non-JSON message, ignoring:\", event.data);\n        return;\n      }\n\n      if (!pc.current) {\n        setupPeerConnection();\n      }\n\n      if (data.type === 'offer') {\n        await pc.current.setRemoteDescription(new RTCSessionDescription(data.offer));\n        const answer = await pc.current.createAnswer();\n        await pc.current.setLocalDescription(answer);\n        ws.current.send(JSON.stringify({ type: 'answer', answer }));\n      } else if (data.type === 'candidate') {\n        try {\n          await pc.current.addIceCandidate(new RTCIceCandidate(data.candidate));\n        } catch (err) {\n          console.error(\"Error adding ICE candidate:\", err);\n        }\n      }\n    };\n\n    return () => {\n      ws.current?.close();\n      pc.current?.close();\n    };\n  }, []);\n\n  const setupPeerConnection = () => {\n    pc.current = new RTCPeerConnection();\n\n    pc.current.onicecandidate = (event) => {\n      if (event.candidate) {\n        ws.current.send(JSON.stringify({ type: 'candidate', candidate: event.candidate }));\n      }\n    };\n\n    pc.current.ondatachannel = (event) => {\n      const receiveChannel = event.channel;\n\n      const chunks = [];\n      receiveChannel.onmessage = (e) => {\n        console.log(\"Received data:\", e.data);\n        chunks.push(e.data);\n      };\n\n      receiveChannel.onopen = () => {\n        console.log(\"Data channel open\");\n      };\n\n      receiveChannel.onclose = () => {\n        console.log(\"Data channel closed\");\n        const blob = new Blob(chunks);\n        setReceivedBlob(blob);\n      };\n    };\n  };\n\n  return (\n    <div>\n      <h2>Receiver</h2>\n      {receivedBlob && (\n        <a href={URL.createObjectURL(receivedBlob)} download=\"received_file\">\n          Download Received File\n        </a>\n      )}\n    </div>\n  );\n};\n\nexport default Receiver;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAMC,EAAE,GAAGN,MAAM,CAAC,IAAI,CAAC;EACvB,MAAMO,EAAE,GAAGP,MAAM,CAAC,IAAI,CAAC;EACvB,MAAM,CAACQ,YAAY,EAAEC,eAAe,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAEtDF,SAAS,CAAC,MAAM;IACd;IACAO,EAAE,CAACI,OAAO,GAAG,IAAIC,SAAS,CAAC,sBAAsB,CAAC;IAElDL,EAAE,CAACI,OAAO,CAACE,OAAO,GAAIC,GAAG,IAAK;MAC5BC,OAAO,CAACC,KAAK,CAAC,kBAAkB,EAAEF,GAAG,CAAC;IACxC,CAAC;IAEDP,EAAE,CAACI,OAAO,CAACM,MAAM,GAAG,MAAM;MACxBF,OAAO,CAACG,GAAG,CAAC,qBAAqB,CAAC;IACpC,CAAC;IAEDX,EAAE,CAACI,OAAO,CAACQ,SAAS,GAAG,MAAOC,KAAK,IAAK;MACtC,IAAIC,IAAI;MACR,IAAI;QACFA,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACC,IAAI,CAAC;MAC/B,CAAC,CAAC,OAAOP,GAAG,EAAE;QACZC,OAAO,CAACS,IAAI,CAAC,sCAAsC,EAAEJ,KAAK,CAACC,IAAI,CAAC;QAChE;MACF;MAEA,IAAI,CAACb,EAAE,CAACG,OAAO,EAAE;QACfc,mBAAmB,CAAC,CAAC;MACvB;MAEA,IAAIJ,IAAI,CAACK,IAAI,KAAK,OAAO,EAAE;QACzB,MAAMlB,EAAE,CAACG,OAAO,CAACgB,oBAAoB,CAAC,IAAIC,qBAAqB,CAACP,IAAI,CAACQ,KAAK,CAAC,CAAC;QAC5E,MAAMC,MAAM,GAAG,MAAMtB,EAAE,CAACG,OAAO,CAACoB,YAAY,CAAC,CAAC;QAC9C,MAAMvB,EAAE,CAACG,OAAO,CAACqB,mBAAmB,CAACF,MAAM,CAAC;QAC5CvB,EAAE,CAACI,OAAO,CAACsB,IAAI,CAACX,IAAI,CAACY,SAAS,CAAC;UAAER,IAAI,EAAE,QAAQ;UAAEI;QAAO,CAAC,CAAC,CAAC;MAC7D,CAAC,MAAM,IAAIT,IAAI,CAACK,IAAI,KAAK,WAAW,EAAE;QACpC,IAAI;UACF,MAAMlB,EAAE,CAACG,OAAO,CAACwB,eAAe,CAAC,IAAIC,eAAe,CAACf,IAAI,CAACgB,SAAS,CAAC,CAAC;QACvE,CAAC,CAAC,OAAOvB,GAAG,EAAE;UACZC,OAAO,CAACC,KAAK,CAAC,6BAA6B,EAAEF,GAAG,CAAC;QACnD;MACF;IACF,CAAC;IAED,OAAO,MAAM;MAAA,IAAAwB,WAAA,EAAAC,WAAA;MACX,CAAAD,WAAA,GAAA/B,EAAE,CAACI,OAAO,cAAA2B,WAAA,uBAAVA,WAAA,CAAYE,KAAK,CAAC,CAAC;MACnB,CAAAD,WAAA,GAAA/B,EAAE,CAACG,OAAO,cAAA4B,WAAA,uBAAVA,WAAA,CAAYC,KAAK,CAAC,CAAC;IACrB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMf,mBAAmB,GAAGA,CAAA,KAAM;IAChCjB,EAAE,CAACG,OAAO,GAAG,IAAI8B,iBAAiB,CAAC,CAAC;IAEpCjC,EAAE,CAACG,OAAO,CAAC+B,cAAc,GAAItB,KAAK,IAAK;MACrC,IAAIA,KAAK,CAACiB,SAAS,EAAE;QACnB9B,EAAE,CAACI,OAAO,CAACsB,IAAI,CAACX,IAAI,CAACY,SAAS,CAAC;UAAER,IAAI,EAAE,WAAW;UAAEW,SAAS,EAAEjB,KAAK,CAACiB;QAAU,CAAC,CAAC,CAAC;MACpF;IACF,CAAC;IAED7B,EAAE,CAACG,OAAO,CAACgC,aAAa,GAAIvB,KAAK,IAAK;MACpC,MAAMwB,cAAc,GAAGxB,KAAK,CAACyB,OAAO;MAEpC,MAAMC,MAAM,GAAG,EAAE;MACjBF,cAAc,CAACzB,SAAS,GAAI4B,CAAC,IAAK;QAChChC,OAAO,CAACG,GAAG,CAAC,gBAAgB,EAAE6B,CAAC,CAAC1B,IAAI,CAAC;QACrCyB,MAAM,CAACE,IAAI,CAACD,CAAC,CAAC1B,IAAI,CAAC;MACrB,CAAC;MAEDuB,cAAc,CAAC3B,MAAM,GAAG,MAAM;QAC5BF,OAAO,CAACG,GAAG,CAAC,mBAAmB,CAAC;MAClC,CAAC;MAED0B,cAAc,CAACK,OAAO,GAAG,MAAM;QAC7BlC,OAAO,CAACG,GAAG,CAAC,qBAAqB,CAAC;QAClC,MAAMgC,IAAI,GAAG,IAAIC,IAAI,CAACL,MAAM,CAAC;QAC7BpC,eAAe,CAACwC,IAAI,CAAC;MACvB,CAAC;IACH,CAAC;EACH,CAAC;EAED,oBACE9C,OAAA;IAAAgD,QAAA,gBACEhD,OAAA;MAAAgD,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAChB/C,YAAY,iBACXL,OAAA;MAAGqD,IAAI,EAAEC,GAAG,CAACC,eAAe,CAAClD,YAAY,CAAE;MAACmD,QAAQ,EAAC,eAAe;MAAAR,QAAA,EAAC;IAErE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACJ;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAClD,EAAA,CA1FID,QAAQ;AAAAwD,EAAA,GAARxD,QAAQ;AA4Fd,eAAeA,QAAQ;AAAC,IAAAwD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}