{"ast":null,"code":"var _jsxFileName = \"E:\\\\secure-p2p-transfer\\\\frontend\\\\src\\\\Receiver.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SIGNALING_SERVER_URL = \"wss://localhost:8080\";\nfunction randomId() {\n  return Math.random().toString(36).substring(2, 8);\n}\nexport default function Receiver() {\n  _s();\n  const [id] = useState(randomId());\n  const [downloadUrl, setDownloadUrl] = useState(null);\n  const [fileName, setFileName] = useState(\"\");\n  const ws = useRef(null);\n  const pc = useRef(null);\n  const dc = useRef(null);\n  const [receivedBuffers, setReceivedBuffers] = useState([]);\n  useEffect(() => {\n    ws.current = new WebSocket(SIGNALING_SERVER_URL);\n    ws.current.onopen = () => {\n      console.log(\"Receiver WebSocket connected\");\n    };\n    ws.current.onmessage = async event => {\n      const message = JSON.parse(event.data);\n      if (message.to !== id) return; // ignore messages not to me\n\n      if (message.sdp) {\n        console.log(\"Got SDP from sender\");\n        await pc.current.setRemoteDescription(message.sdp);\n        if (message.sdp.type === \"offer\") {\n          const answer = await pc.current.createAnswer();\n          await pc.current.setLocalDescription(answer);\n          sendMessage({\n            sdp: pc.current.localDescription,\n            to: message.from\n          });\n        }\n      } else if (message.candidate) {\n        try {\n          await pc.current.addIceCandidate(message.candidate);\n          console.log(\"Added ICE candidate\");\n        } catch (e) {\n          console.error(\"Error adding ICE candidate\", e);\n        }\n      }\n    };\n    ws.current.onerror = e => console.error(\"WebSocket error\", e);\n    setupPeerConnection();\n    return () => {\n      ws.current.close();\n    };\n  }, [id]);\n  function sendMessage(message) {\n    message.from = id;\n    ws.current.send(JSON.stringify(message));\n  }\n  function setupPeerConnection() {\n    pc.current = new RTCPeerConnection({\n      iceServers: [{\n        urls: \"stun:stun.l.google.com:19302\"\n      }]\n    });\n    pc.current.onicecandidate = event => {\n      if (event.candidate) {\n        sendMessage({\n          candidate: event.candidate,\n          to: \"sender\"\n        });\n      }\n    };\n    pc.current.ondatachannel = event => {\n      console.log(\"Data channel received\");\n      dc.current = event.channel;\n      dc.current.binaryType = \"arraybuffer\";\n      let buffers = [];\n      dc.current.onopen = () => {\n        console.log(\"Data channel open\");\n      };\n      dc.current.onmessage = e => {\n        if (typeof e.data === \"string\") {\n          try {\n            const signal = JSON.parse(e.data);\n            if (signal.done) {\n              console.log(\"File transfer complete:\", signal.fileName);\n              const blob = new Blob(buffers);\n              const url = URL.createObjectURL(blob);\n              setDownloadUrl(url);\n              setFileName(signal.fileName);\n              buffers = [];\n            }\n          } catch (err) {\n            console.error(\"Error parsing JSON from data channel:\", err);\n          }\n        } else {\n          buffers.push(e.data);\n          console.log(\"Received chunk size:\", e.data.byteLength);\n        }\n      };\n      dc.current.onclose = () => {\n        console.log(\"Data channel closed\");\n      };\n    };\n    pc.current.onconnectionstatechange = () => {\n      console.log(\"Connection state:\", pc.current.connectionState);\n    };\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Receiver\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Your ID (share with sender): \", /*#__PURE__*/_jsxDEV(\"b\", {\n        children: id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 39\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), downloadUrl && /*#__PURE__*/_jsxDEV(\"a\", {\n      href: downloadUrl,\n      download: fileName,\n      children: [\"Download \", fileName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n}\n_s(Receiver, \"2wMP6zZxTsFnz3qF5Wii5TTyer0=\");\n_c = Receiver;\nvar _c;\n$RefreshReg$(_c, \"Receiver\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","SIGNALING_SERVER_URL","randomId","Math","random","toString","substring","Receiver","_s","id","downloadUrl","setDownloadUrl","fileName","setFileName","ws","pc","dc","receivedBuffers","setReceivedBuffers","current","WebSocket","onopen","console","log","onmessage","event","message","JSON","parse","data","to","sdp","setRemoteDescription","type","answer","createAnswer","setLocalDescription","sendMessage","localDescription","from","candidate","addIceCandidate","e","error","onerror","setupPeerConnection","close","send","stringify","RTCPeerConnection","iceServers","urls","onicecandidate","ondatachannel","channel","binaryType","buffers","signal","done","blob","Blob","url","URL","createObjectURL","err","push","byteLength","onclose","onconnectionstatechange","connectionState","children","_jsxFileName","lineNumber","columnNumber","href","download","_c","$RefreshReg$"],"sources":["E:/secure-p2p-transfer/frontend/src/Receiver.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\n\nconst SIGNALING_SERVER_URL = \"wss://localhost:8080\";\n\nfunction randomId() {\n  return Math.random().toString(36).substring(2, 8);\n}\n\nexport default function Receiver() {\n  const [id] = useState(randomId());\n  const [downloadUrl, setDownloadUrl] = useState(null);\n  const [fileName, setFileName] = useState(\"\");\n  const ws = useRef(null);\n  const pc = useRef(null);\n  const dc = useRef(null);\n  const [receivedBuffers, setReceivedBuffers] = useState([]);\n\n  useEffect(() => {\n    ws.current = new WebSocket(SIGNALING_SERVER_URL);\n\n    ws.current.onopen = () => {\n      console.log(\"Receiver WebSocket connected\");\n    };\n\n    ws.current.onmessage = async (event) => {\n      const message = JSON.parse(event.data);\n\n      if (message.to !== id) return; // ignore messages not to me\n\n      if (message.sdp) {\n        console.log(\"Got SDP from sender\");\n        await pc.current.setRemoteDescription(message.sdp);\n\n        if (message.sdp.type === \"offer\") {\n          const answer = await pc.current.createAnswer();\n          await pc.current.setLocalDescription(answer);\n          sendMessage({ sdp: pc.current.localDescription, to: message.from });\n        }\n      } else if (message.candidate) {\n        try {\n          await pc.current.addIceCandidate(message.candidate);\n          console.log(\"Added ICE candidate\");\n        } catch (e) {\n          console.error(\"Error adding ICE candidate\", e);\n        }\n      }\n    };\n\n    ws.current.onerror = (e) => console.error(\"WebSocket error\", e);\n\n    setupPeerConnection();\n\n    return () => {\n      ws.current.close();\n    };\n  }, [id]);\n\n  function sendMessage(message) {\n    message.from = id;\n    ws.current.send(JSON.stringify(message));\n  }\n\n  function setupPeerConnection() {\n    pc.current = new RTCPeerConnection({\n      iceServers: [{ urls: \"stun:stun.l.google.com:19302\" }],\n    });\n\n    pc.current.onicecandidate = (event) => {\n      if (event.candidate) {\n        sendMessage({ candidate: event.candidate, to: \"sender\" });\n      }\n    };\n\n    pc.current.ondatachannel = (event) => {\n      console.log(\"Data channel received\");\n      dc.current = event.channel;\n      dc.current.binaryType = \"arraybuffer\";\n\n      let buffers = [];\n\n      dc.current.onopen = () => {\n        console.log(\"Data channel open\");\n      };\n\n      dc.current.onmessage = (e) => {\n        if (typeof e.data === \"string\") {\n          try {\n            const signal = JSON.parse(e.data);\n            if (signal.done) {\n              console.log(\"File transfer complete:\", signal.fileName);\n              const blob = new Blob(buffers);\n              const url = URL.createObjectURL(blob);\n              setDownloadUrl(url);\n              setFileName(signal.fileName);\n              buffers = [];\n            }\n          } catch (err) {\n            console.error(\"Error parsing JSON from data channel:\", err);\n          }\n        } else {\n          buffers.push(e.data);\n          console.log(\"Received chunk size:\", e.data.byteLength);\n        }\n      };\n\n      dc.current.onclose = () => {\n        console.log(\"Data channel closed\");\n      };\n    };\n\n    pc.current.onconnectionstatechange = () => {\n      console.log(\"Connection state:\", pc.current.connectionState);\n    };\n  }\n\n  return (\n    <div>\n      <h2>Receiver</h2>\n      <p>Your ID (share with sender): <b>{id}</b></p>\n      {downloadUrl && (\n        <a href={downloadUrl} download={fileName}>\n          Download {fileName}\n        </a>\n      )}\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}