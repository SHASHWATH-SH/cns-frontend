{"ast":null,"code":"var _jsxFileName = \"E:\\\\secure-p2p-transfer\\\\frontend\\\\src\\\\Sender.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Sender = () => {\n  _s();\n  const [receiverId, setReceiverId] = useState('');\n  const [file, setFile] = useState(null);\n  const ws = useRef(null);\n  const pc = useRef(null);\n  const dc = useRef(null);\n  const [status, setStatus] = useState('Idle');\n  const connect = () => {\n    if (!receiverId || !file) {\n      alert('Please enter Receiver ID and select a file.');\n      return;\n    }\n    ws.current = new WebSocket('wss://localhost:8080');\n    ws.current.onopen = () => {\n      const senderId = Math.random().toString(36).substring(2, 8).toUpperCase();\n      ws.current.send(JSON.stringify({\n        type: 'register',\n        id: senderId\n      }));\n      pc.current = new RTCPeerConnection();\n      dc.current = pc.current.createDataChannel('file');\n      dc.current.binaryType = 'arraybuffer';\n      dc.current.onopen = () => {\n        sendFile();\n      };\n      pc.current.onicecandidate = e => {\n        if (e.candidate) {\n          ws.current.send(JSON.stringify({\n            type: 'candidate',\n            candidate: e.candidate,\n            target: receiverId\n          }));\n        }\n      };\n      pc.current.createOffer().then(offer => {\n        pc.current.setLocalDescription(offer);\n        ws.current.send(JSON.stringify({\n          type: 'offer',\n          offer,\n          target: receiverId,\n          sender: senderId\n        }));\n        setStatus('Offer sent. Waiting for answer...');\n      });\n    };\n    ws.current.onmessage = async event => {\n      const data = JSON.parse(event.data);\n      switch (data.type) {\n        case 'answer':\n          await pc.current.setRemoteDescription(new RTCSessionDescription(data.answer));\n          setStatus('Connection established. Sending file...');\n          break;\n        case 'candidate':\n          if (pc.current) {\n            await pc.current.addIceCandidate(new RTCIceCandidate(data.candidate));\n          }\n          break;\n        default:\n          break;\n      }\n    };\n  };\n  const sendFile = () => {\n    const chunkSize = 16384;\n    const fileReader = new FileReader();\n    let offset = 0;\n    fileReader.onload = e => {\n      dc.current.send(e.target.result);\n      offset += e.target.result.byteLength;\n      if (offset < file.size) {\n        readSlice(offset);\n      } else {\n        dc.current.send('EOF');\n        setStatus('File sent successfully.');\n      }\n    };\n    const readSlice = o => {\n      const slice = file.slice(o, o + chunkSize);\n      fileReader.readAsArrayBuffer(slice);\n    };\n    readSlice(0);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Sender\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter Receiver ID\",\n      value: receiverId,\n      onChange: e => setReceiverId(e.target.value.toUpperCase())\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: e => setFile(e.target.files[0])\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: connect,\n      children: \"Send File\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Status: \", status]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(Sender, \"H9d8ZiJPIFnKjIsoP316X6HRzdQ=\");\n_c = Sender;\nexport default Sender;\nvar _c;\n$RefreshReg$(_c, \"Sender\");","map":{"version":3,"names":["React","useRef","useState","jsxDEV","_jsxDEV","Sender","_s","receiverId","setReceiverId","file","setFile","ws","pc","dc","status","setStatus","connect","alert","current","WebSocket","onopen","senderId","Math","random","toString","substring","toUpperCase","send","JSON","stringify","type","id","RTCPeerConnection","createDataChannel","binaryType","sendFile","onicecandidate","e","candidate","target","createOffer","then","offer","setLocalDescription","sender","onmessage","event","data","parse","setRemoteDescription","RTCSessionDescription","answer","addIceCandidate","RTCIceCandidate","chunkSize","fileReader","FileReader","offset","onload","result","byteLength","size","readSlice","o","slice","readAsArrayBuffer","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","files","onClick","_c","$RefreshReg$"],"sources":["E:/secure-p2p-transfer/frontend/src/Sender.js"],"sourcesContent":["import React, { useRef, useState } from 'react';\n\nconst Sender = () => {\n  const [receiverId, setReceiverId] = useState('');\n  const [file, setFile] = useState(null);\n  const ws = useRef(null);\n  const pc = useRef(null);\n  const dc = useRef(null);\n  const [status, setStatus] = useState('Idle');\n\n  const connect = () => {\n    if (!receiverId || !file) {\n      alert('Please enter Receiver ID and select a file.');\n      return;\n    }\n\n    ws.current = new WebSocket('wss://localhost:8080');\n\n    ws.current.onopen = () => {\n      const senderId = Math.random().toString(36).substring(2, 8).toUpperCase();\n      ws.current.send(JSON.stringify({ type: 'register', id: senderId }));\n\n      pc.current = new RTCPeerConnection();\n\n      dc.current = pc.current.createDataChannel('file');\n      dc.current.binaryType = 'arraybuffer';\n\n      dc.current.onopen = () => {\n        sendFile();\n      };\n\n      pc.current.onicecandidate = (e) => {\n        if (e.candidate) {\n          ws.current.send(JSON.stringify({ type: 'candidate', candidate: e.candidate, target: receiverId }));\n        }\n      };\n\n      pc.current.createOffer().then((offer) => {\n        pc.current.setLocalDescription(offer);\n        ws.current.send(JSON.stringify({ type: 'offer', offer, target: receiverId, sender: senderId }));\n        setStatus('Offer sent. Waiting for answer...');\n      });\n    };\n\n    ws.current.onmessage = async (event) => {\n      const data = JSON.parse(event.data);\n\n      switch (data.type) {\n        case 'answer':\n          await pc.current.setRemoteDescription(new RTCSessionDescription(data.answer));\n          setStatus('Connection established. Sending file...');\n          break;\n        case 'candidate':\n          if (pc.current) {\n            await pc.current.addIceCandidate(new RTCIceCandidate(data.candidate));\n          }\n          break;\n        default:\n          break;\n      }\n    };\n  };\n\n  const sendFile = () => {\n    const chunkSize = 16384;\n    const fileReader = new FileReader();\n    let offset = 0;\n\n    fileReader.onload = (e) => {\n      dc.current.send(e.target.result);\n      offset += e.target.result.byteLength;\n\n      if (offset < file.size) {\n        readSlice(offset);\n      } else {\n        dc.current.send('EOF');\n        setStatus('File sent successfully.');\n      }\n    };\n\n    const readSlice = (o) => {\n      const slice = file.slice(o, o + chunkSize);\n      fileReader.readAsArrayBuffer(slice);\n    };\n\n    readSlice(0);\n  };\n\n  return (\n    <div>\n      <h2>Sender</h2>\n      <input\n        type=\"text\"\n        placeholder=\"Enter Receiver ID\"\n        value={receiverId}\n        onChange={(e) => setReceiverId(e.target.value.toUpperCase())}\n      />\n      <input type=\"file\" onChange={(e) => setFile(e.target.files[0])} />\n      <button onClick={connect}>Send File</button>\n      <p>Status: {status}</p>\n    </div>\n  );\n};\n\nexport default Sender;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}