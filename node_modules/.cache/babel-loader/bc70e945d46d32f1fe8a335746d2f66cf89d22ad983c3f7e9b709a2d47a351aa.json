{"ast":null,"code":"// cryptoUtils.js\n\n// Generate ECDH key pair\nexport async function generateKeyPair() {\n  return await window.crypto.subtle.generateKey({\n    name: \"ECDH\",\n    namedCurve: \"P-256\"\n  }, true, [\"deriveKey\"]);\n}\n\n// Derive a shared AES-GCM key from ECDH\nexport async function deriveAESKey(privateKey, publicKey) {\n  return await window.crypto.subtle.deriveKey({\n    name: \"ECDH\",\n    public: publicKey\n  }, privateKey, {\n    name: \"AES-GCM\",\n    length: 256\n  }, false, [\"encrypt\", \"decrypt\"]);\n}\n\n// Export public key to send over WebRTC\nexport async function exportPublicKey(key) {\n  const exported = await window.crypto.subtle.exportKey(\"jwk\", key);\n  return JSON.stringify(exported);\n}\n\n// Import received public key\nexport async function importPublicKey(jwk) {\n  return await window.crypto.subtle.importKey(\"jwk\", JSON.parse(jwk), {\n    name: \"ECDH\",\n    namedCurve: \"P-256\"\n  }, true, []);\n}\n\n// Encrypt a file chunk with AES-GCM\nexport async function encryptData(key, data) {\n  const iv = window.crypto.getRandomValues(new Uint8Array(12));\n  const encrypted = await window.crypto.subtle.encrypt({\n    name: \"AES-GCM\",\n    iv: iv\n  }, key, data);\n  return {\n    iv,\n    encrypted\n  };\n}\n\n// Decrypt a file chunk with AES-GCM\nexport async function decryptData(key, encrypted, iv) {\n  return await window.crypto.subtle.decrypt({\n    name: \"AES-GCM\",\n    iv: iv\n  }, key, encrypted);\n}","map":{"version":3,"names":["generateKeyPair","window","crypto","subtle","generateKey","name","namedCurve","deriveAESKey","privateKey","publicKey","deriveKey","public","length","exportPublicKey","key","exported","exportKey","JSON","stringify","importPublicKey","jwk","importKey","parse","encryptData","data","iv","getRandomValues","Uint8Array","encrypted","encrypt","decryptData","decrypt"],"sources":["E:/secure-p2p-transfer/frontend/src/cryptoUtils.js"],"sourcesContent":["// cryptoUtils.js\n\n// Generate ECDH key pair\nexport async function generateKeyPair() {\n  return await window.crypto.subtle.generateKey(\n    {\n      name: \"ECDH\",\n      namedCurve: \"P-256\",\n    },\n    true,\n    [\"deriveKey\"]\n  );\n}\n\n// Derive a shared AES-GCM key from ECDH\nexport async function deriveAESKey(privateKey, publicKey) {\n  return await window.crypto.subtle.deriveKey(\n    {\n      name: \"ECDH\",\n      public: publicKey,\n    },\n    privateKey,\n    {\n      name: \"AES-GCM\",\n      length: 256,\n    },\n    false,\n    [\"encrypt\", \"decrypt\"]\n  );\n}\n\n// Export public key to send over WebRTC\nexport async function exportPublicKey(key) {\n  const exported = await window.crypto.subtle.exportKey(\"jwk\", key);\n  return JSON.stringify(exported);\n}\n\n// Import received public key\nexport async function importPublicKey(jwk) {\n  return await window.crypto.subtle.importKey(\n    \"jwk\",\n    JSON.parse(jwk),\n    {\n      name: \"ECDH\",\n      namedCurve: \"P-256\",\n    },\n    true,\n    []\n  );\n}\n\n// Encrypt a file chunk with AES-GCM\nexport async function encryptData(key, data) {\n  const iv = window.crypto.getRandomValues(new Uint8Array(12));\n  const encrypted = await window.crypto.subtle.encrypt(\n    {\n      name: \"AES-GCM\",\n      iv: iv,\n    },\n    key,\n    data\n  );\n  return { iv, encrypted };\n}\n\n// Decrypt a file chunk with AES-GCM\nexport async function decryptData(key, encrypted, iv) {\n  return await window.crypto.subtle.decrypt(\n    {\n      name: \"AES-GCM\",\n      iv: iv,\n    },\n    key,\n    encrypted\n  );\n}\n"],"mappings":"AAAA;;AAEA;AACA,OAAO,eAAeA,eAAeA,CAAA,EAAG;EACtC,OAAO,MAAMC,MAAM,CAACC,MAAM,CAACC,MAAM,CAACC,WAAW,CAC3C;IACEC,IAAI,EAAE,MAAM;IACZC,UAAU,EAAE;EACd,CAAC,EACD,IAAI,EACJ,CAAC,WAAW,CACd,CAAC;AACH;;AAEA;AACA,OAAO,eAAeC,YAAYA,CAACC,UAAU,EAAEC,SAAS,EAAE;EACxD,OAAO,MAAMR,MAAM,CAACC,MAAM,CAACC,MAAM,CAACO,SAAS,CACzC;IACEL,IAAI,EAAE,MAAM;IACZM,MAAM,EAAEF;EACV,CAAC,EACDD,UAAU,EACV;IACEH,IAAI,EAAE,SAAS;IACfO,MAAM,EAAE;EACV,CAAC,EACD,KAAK,EACL,CAAC,SAAS,EAAE,SAAS,CACvB,CAAC;AACH;;AAEA;AACA,OAAO,eAAeC,eAAeA,CAACC,GAAG,EAAE;EACzC,MAAMC,QAAQ,GAAG,MAAMd,MAAM,CAACC,MAAM,CAACC,MAAM,CAACa,SAAS,CAAC,KAAK,EAAEF,GAAG,CAAC;EACjE,OAAOG,IAAI,CAACC,SAAS,CAACH,QAAQ,CAAC;AACjC;;AAEA;AACA,OAAO,eAAeI,eAAeA,CAACC,GAAG,EAAE;EACzC,OAAO,MAAMnB,MAAM,CAACC,MAAM,CAACC,MAAM,CAACkB,SAAS,CACzC,KAAK,EACLJ,IAAI,CAACK,KAAK,CAACF,GAAG,CAAC,EACf;IACEf,IAAI,EAAE,MAAM;IACZC,UAAU,EAAE;EACd,CAAC,EACD,IAAI,EACJ,EACF,CAAC;AACH;;AAEA;AACA,OAAO,eAAeiB,WAAWA,CAACT,GAAG,EAAEU,IAAI,EAAE;EAC3C,MAAMC,EAAE,GAAGxB,MAAM,CAACC,MAAM,CAACwB,eAAe,CAAC,IAAIC,UAAU,CAAC,EAAE,CAAC,CAAC;EAC5D,MAAMC,SAAS,GAAG,MAAM3B,MAAM,CAACC,MAAM,CAACC,MAAM,CAAC0B,OAAO,CAClD;IACExB,IAAI,EAAE,SAAS;IACfoB,EAAE,EAAEA;EACN,CAAC,EACDX,GAAG,EACHU,IACF,CAAC;EACD,OAAO;IAAEC,EAAE;IAAEG;EAAU,CAAC;AAC1B;;AAEA;AACA,OAAO,eAAeE,WAAWA,CAAChB,GAAG,EAAEc,SAAS,EAAEH,EAAE,EAAE;EACpD,OAAO,MAAMxB,MAAM,CAACC,MAAM,CAACC,MAAM,CAAC4B,OAAO,CACvC;IACE1B,IAAI,EAAE,SAAS;IACfoB,EAAE,EAAEA;EACN,CAAC,EACDX,GAAG,EACHc,SACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}