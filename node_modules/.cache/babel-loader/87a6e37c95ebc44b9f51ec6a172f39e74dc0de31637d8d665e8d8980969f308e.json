{"ast":null,"code":"var _jsxFileName = \"E:\\\\secure-p2p-transfer\\\\frontend\\\\src\\\\Sender.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from \"react\";\nimport { createPeerConnection, SIGNAL_SERVER } from \"./utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Sender() {\n  _s();\n  const [myId] = useState(Math.random().toString(36).substr(2, 8));\n  const [receiverId, setReceiverId] = useState(\"\");\n  const [file, setFile] = useState(null);\n  const wsRef = useRef(null);\n  const peerRef = useRef(null);\n  const dataChannelRef = useRef(null);\n\n  // Connect to signaling server and setup peer connection\n  const startConnection = () => {\n    if (!receiverId) {\n      alert(\"Enter Receiver ID\");\n      return;\n    }\n    if (!file) {\n      alert(\"Select a file\");\n      return;\n    }\n    const ws = new WebSocket(SIGNAL_SERVER);\n    wsRef.current = ws;\n    ws.onopen = () => {\n      ws.send(JSON.stringify({\n        type: \"register\",\n        id: myId\n      }));\n      setupPeerConnection(ws);\n    };\n    ws.onmessage = async msg => {\n      const data = JSON.parse(msg.data);\n      if (data.answer) {\n        await peerRef.current.setRemoteDescription(new RTCSessionDescription(data.answer));\n        console.log(\"Answer set\");\n      }\n      if (data.ice) {\n        await peerRef.current.addIceCandidate(data.ice);\n        console.log(\"Added ICE candidate\");\n      }\n    };\n  };\n\n  // Setup WebRTC peer and data channel\n  const setupPeerConnection = ws => {\n    const peerConnection = createPeerConnection();\n    peerRef.current = peerConnection;\n    const dataChannel = peerConnection.createDataChannel(\"fileTransfer\");\n    dataChannel.binaryType = \"arraybuffer\";\n    dataChannelRef.current = dataChannel;\n    dataChannel.onopen = () => {\n      console.log(\"Data channel opened, sending file...\");\n      sendFileInChunks(file);\n    };\n    dataChannel.onclose = () => console.log(\"Data channel closed\");\n    peerConnection.onicecandidate = e => {\n      if (e.candidate) {\n        ws.send(JSON.stringify({\n          from: myId,\n          to: receiverId,\n          ice: e.candidate\n        }));\n      }\n    };\n    peerConnection.createOffer().then(offer => peerConnection.setLocalDescription(offer)).then(() => {\n      ws.send(JSON.stringify({\n        from: myId,\n        to: receiverId,\n        offer: peerConnection.localDescription\n      }));\n      console.log(\"Offer sent\");\n    });\n  };\n\n  // Send file in chunks over data channel\n  const sendFileInChunks = file => {\n    const chunkSize = 16384;\n    let offset = 0;\n    const reader = new FileReader();\n    reader.onload = e => {\n      dataChannelRef.current.send(e.target.result);\n      offset += chunkSize;\n      if (offset < file.size) {\n        readSlice(offset);\n      } else {\n        dataChannelRef.current.send(\"EOF\"); // signal end of file\n        console.log(\"File sent\");\n      }\n    };\n    const readSlice = o => {\n      const slice = file.slice(o, o + chunkSize);\n      reader.readAsArrayBuffer(slice);\n    };\n    readSlice(0);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Sender\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Your ID: \", /*#__PURE__*/_jsxDEV(\"b\", {\n        children: myId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter Receiver ID\",\n      value: receiverId,\n      onChange: e => setReceiverId(e.target.value.trim())\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: e => setFile(e.target.files[0])\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startConnection,\n      children: \"Send File\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n_s(Sender, \"u8SrKrLrH9dwdwG4C0rJvQJ5a+c=\");\n_c = Sender;\nexport default Sender;\nvar _c;\n$RefreshReg$(_c, \"Sender\");","map":{"version":3,"names":["React","useRef","useState","createPeerConnection","SIGNAL_SERVER","jsxDEV","_jsxDEV","Sender","_s","myId","Math","random","toString","substr","receiverId","setReceiverId","file","setFile","wsRef","peerRef","dataChannelRef","startConnection","alert","ws","WebSocket","current","onopen","send","JSON","stringify","type","id","setupPeerConnection","onmessage","msg","data","parse","answer","setRemoteDescription","RTCSessionDescription","console","log","ice","addIceCandidate","peerConnection","dataChannel","createDataChannel","binaryType","sendFileInChunks","onclose","onicecandidate","e","candidate","from","to","createOffer","then","offer","setLocalDescription","localDescription","chunkSize","offset","reader","FileReader","onload","target","result","size","readSlice","o","slice","readAsArrayBuffer","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","trim","files","onClick","_c","$RefreshReg$"],"sources":["E:/secure-p2p-transfer/frontend/src/Sender.js"],"sourcesContent":["import React, { useRef, useState } from \"react\";\nimport { createPeerConnection, SIGNAL_SERVER } from \"./utils\";\n\nfunction Sender() {\n  const [myId] = useState(Math.random().toString(36).substr(2, 8));\n  const [receiverId, setReceiverId] = useState(\"\");\n  const [file, setFile] = useState(null);\n  const wsRef = useRef(null);\n  const peerRef = useRef(null);\n  const dataChannelRef = useRef(null);\n\n  // Connect to signaling server and setup peer connection\n  const startConnection = () => {\n    if (!receiverId) {\n      alert(\"Enter Receiver ID\");\n      return;\n    }\n    if (!file) {\n      alert(\"Select a file\");\n      return;\n    }\n\n    const ws = new WebSocket(SIGNAL_SERVER);\n    wsRef.current = ws;\n\n    ws.onopen = () => {\n      ws.send(JSON.stringify({ type: \"register\", id: myId }));\n      setupPeerConnection(ws);\n    };\n\n    ws.onmessage = async (msg) => {\n      const data = JSON.parse(msg.data);\n\n      if (data.answer) {\n        await peerRef.current.setRemoteDescription(new RTCSessionDescription(data.answer));\n        console.log(\"Answer set\");\n      }\n      if (data.ice) {\n        await peerRef.current.addIceCandidate(data.ice);\n        console.log(\"Added ICE candidate\");\n      }\n    };\n  };\n\n  // Setup WebRTC peer and data channel\n  const setupPeerConnection = (ws) => {\n    const peerConnection = createPeerConnection();\n    peerRef.current = peerConnection;\n\n    const dataChannel = peerConnection.createDataChannel(\"fileTransfer\");\n    dataChannel.binaryType = \"arraybuffer\";\n    dataChannelRef.current = dataChannel;\n\n    dataChannel.onopen = () => {\n      console.log(\"Data channel opened, sending file...\");\n      sendFileInChunks(file);\n    };\n    dataChannel.onclose = () => console.log(\"Data channel closed\");\n\n    peerConnection.onicecandidate = (e) => {\n      if (e.candidate) {\n        ws.send(JSON.stringify({ from: myId, to: receiverId, ice: e.candidate }));\n      }\n    };\n\n    peerConnection.createOffer()\n      .then((offer) => peerConnection.setLocalDescription(offer))\n      .then(() => {\n        ws.send(JSON.stringify({ from: myId, to: receiverId, offer: peerConnection.localDescription }));\n        console.log(\"Offer sent\");\n      });\n  };\n\n  // Send file in chunks over data channel\n  const sendFileInChunks = (file) => {\n    const chunkSize = 16384;\n    let offset = 0;\n\n    const reader = new FileReader();\n\n    reader.onload = (e) => {\n      dataChannelRef.current.send(e.target.result);\n      offset += chunkSize;\n\n      if (offset < file.size) {\n        readSlice(offset);\n      } else {\n        dataChannelRef.current.send(\"EOF\"); // signal end of file\n        console.log(\"File sent\");\n      }\n    };\n\n    const readSlice = (o) => {\n      const slice = file.slice(o, o + chunkSize);\n      reader.readAsArrayBuffer(slice);\n    };\n\n    readSlice(0);\n  };\n\n  return (\n    <div>\n      <h2>Sender</h2>\n      <p>Your ID: <b>{myId}</b></p>\n      <input\n        type=\"text\"\n        placeholder=\"Enter Receiver ID\"\n        value={receiverId}\n        onChange={(e) => setReceiverId(e.target.value.trim())}\n      />\n      <br />\n      <input\n        type=\"file\"\n        onChange={(e) => setFile(e.target.files[0])}\n      />\n      <br />\n      <button onClick={startConnection}>Send File</button>\n    </div>\n  );\n}\n\nexport default Sender;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}