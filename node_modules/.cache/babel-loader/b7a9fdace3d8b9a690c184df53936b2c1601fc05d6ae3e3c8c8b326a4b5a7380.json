{"ast":null,"code":"var _jsxFileName = \"E:\\\\secure-p2p-transfer\\\\frontend\\\\src\\\\Receiver.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SIGNALING_SERVER_URL = \"wss://localhost:8080\";\nfunction randomId() {\n  return Math.random().toString(36).substring(2, 8);\n}\nexport default function Receiver() {\n  _s();\n  const [id] = useState(randomId());\n  const [downloadUrl, setDownloadUrl] = useState(null);\n  const [fileName, setFileName] = useState(\"\");\n  const ws = useRef(null);\n  const pc = useRef(null);\n  const dc = useRef(null);\n  useEffect(() => {\n    ws.current = new WebSocket(SIGNALING_SERVER_URL);\n    ws.current.onopen = () => {\n      console.log(\"Receiver WebSocket connected\");\n    };\n    ws.current.onmessage = async event => {\n      // Only parse if message is string (JSON)\n      if (typeof event.data === \"string\") {\n        let message;\n        try {\n          message = JSON.parse(event.data);\n        } catch {\n          console.warn(\"Received non-JSON message on signaling WS, ignoring\");\n          return;\n        }\n        if (message.to !== id) return; // ignore if not for me\n\n        if (message.sdp) {\n          console.log(\"Received SDP\");\n          await pc.current.setRemoteDescription(message.sdp);\n          if (message.sdp.type === \"offer\") {\n            const answer = await pc.current.createAnswer();\n            await pc.current.setLocalDescription(answer);\n            sendMessage({\n              sdp: pc.current.localDescription,\n              to: message.from\n            });\n          }\n        } else if (message.candidate) {\n          try {\n            await pc.current.addIceCandidate(message.candidate);\n          } catch (e) {\n            console.error(\"Error adding ICE candidate:\", e);\n          }\n        }\n      } else {\n        console.warn(\"Received non-string message on signaling WS, ignoring\");\n      }\n    };\n    ws.current.onerror = e => console.error(\"WebSocket error:\", e);\n    setupPeerConnection();\n    return () => {\n      ws.current.close();\n    };\n  }, [id]);\n  function sendMessage(message) {\n    message.from = id;\n    ws.current.send(JSON.stringify(message));\n  }\n  function setupPeerConnection() {\n    pc.current = new RTCPeerConnection({\n      iceServers: [{\n        urls: \"stun:stun.l.google.com:19302\"\n      }]\n    });\n    pc.current.onicecandidate = event => {\n      if (event.candidate) {\n        sendMessage({\n          candidate: event.candidate,\n          to: \"sender\"\n        });\n      }\n    };\n    pc.current.ondatachannel = event => {\n      console.log(\"Data channel received\");\n      dc.current = event.channel;\n      dc.current.binaryType = \"arraybuffer\";\n      let buffers = [];\n      dc.current.onopen = () => console.log(\"Data channel open\");\n      dc.current.onmessage = e => {\n        if (typeof e.data === \"string\") {\n          // Control message, parse JSON for done + filename\n          try {\n            const msg = JSON.parse(e.data);\n            if (msg.done) {\n              console.log(\"File transfer complete:\", msg.fileName);\n              const blob = new Blob(buffers);\n              const url = URL.createObjectURL(blob);\n              setDownloadUrl(url);\n              setFileName(msg.fileName);\n              buffers = [];\n            }\n          } catch (err) {\n            console.error(\"Failed parsing data channel message:\", err);\n          }\n        } else {\n          // Binary chunk received\n          buffers.push(e.data);\n          console.log(\"Received chunk:\", e.data.byteLength, \"bytes\");\n        }\n      };\n      dc.current.onclose = () => console.log(\"Data channel closed\");\n    };\n    pc.current.onconnectionstatechange = () => {\n      console.log(\"Connection state:\", pc.current.connectionState);\n    };\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Receiver\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Your ID (share this with sender): \", /*#__PURE__*/_jsxDEV(\"b\", {\n        children: id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 44\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), downloadUrl && /*#__PURE__*/_jsxDEV(\"a\", {\n      href: downloadUrl,\n      download: fileName,\n      onClick: () => setDownloadUrl(null),\n      children: [\"Download \", fileName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n}\n_s(Receiver, \"OYFn9LNPTR1SjF5/G7bwEPeyMe0=\");\n_c = Receiver;\nvar _c;\n$RefreshReg$(_c, \"Receiver\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","SIGNALING_SERVER_URL","randomId","Math","random","toString","substring","Receiver","_s","id","downloadUrl","setDownloadUrl","fileName","setFileName","ws","pc","dc","current","WebSocket","onopen","console","log","onmessage","event","data","message","JSON","parse","warn","to","sdp","setRemoteDescription","type","answer","createAnswer","setLocalDescription","sendMessage","localDescription","from","candidate","addIceCandidate","e","error","onerror","setupPeerConnection","close","send","stringify","RTCPeerConnection","iceServers","urls","onicecandidate","ondatachannel","channel","binaryType","buffers","msg","done","blob","Blob","url","URL","createObjectURL","err","push","byteLength","onclose","onconnectionstatechange","connectionState","children","_jsxFileName","lineNumber","columnNumber","href","download","onClick","_c","$RefreshReg$"],"sources":["E:/secure-p2p-transfer/frontend/src/Receiver.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\n\nconst SIGNALING_SERVER_URL = \"wss://localhost:8080\";\n\nfunction randomId() {\n  return Math.random().toString(36).substring(2, 8);\n}\n\nexport default function Receiver() {\n  const [id] = useState(randomId());\n  const [downloadUrl, setDownloadUrl] = useState(null);\n  const [fileName, setFileName] = useState(\"\");\n  const ws = useRef(null);\n  const pc = useRef(null);\n  const dc = useRef(null);\n\n  useEffect(() => {\n    ws.current = new WebSocket(SIGNALING_SERVER_URL);\n\n    ws.current.onopen = () => {\n      console.log(\"Receiver WebSocket connected\");\n    };\n\n    ws.current.onmessage = async (event) => {\n      // Only parse if message is string (JSON)\n      if (typeof event.data === \"string\") {\n        let message;\n        try {\n          message = JSON.parse(event.data);\n        } catch {\n          console.warn(\"Received non-JSON message on signaling WS, ignoring\");\n          return;\n        }\n\n        if (message.to !== id) return; // ignore if not for me\n\n        if (message.sdp) {\n          console.log(\"Received SDP\");\n          await pc.current.setRemoteDescription(message.sdp);\n          if (message.sdp.type === \"offer\") {\n            const answer = await pc.current.createAnswer();\n            await pc.current.setLocalDescription(answer);\n            sendMessage({ sdp: pc.current.localDescription, to: message.from });\n          }\n        } else if (message.candidate) {\n          try {\n            await pc.current.addIceCandidate(message.candidate);\n          } catch (e) {\n            console.error(\"Error adding ICE candidate:\", e);\n          }\n        }\n      } else {\n        console.warn(\"Received non-string message on signaling WS, ignoring\");\n      }\n    };\n\n    ws.current.onerror = (e) => console.error(\"WebSocket error:\", e);\n\n    setupPeerConnection();\n\n    return () => {\n      ws.current.close();\n    };\n  }, [id]);\n\n  function sendMessage(message) {\n    message.from = id;\n    ws.current.send(JSON.stringify(message));\n  }\n\n  function setupPeerConnection() {\n    pc.current = new RTCPeerConnection({\n      iceServers: [{ urls: \"stun:stun.l.google.com:19302\" }],\n    });\n\n    pc.current.onicecandidate = (event) => {\n      if (event.candidate) {\n        sendMessage({ candidate: event.candidate, to: \"sender\" });\n      }\n    };\n\n    pc.current.ondatachannel = (event) => {\n      console.log(\"Data channel received\");\n      dc.current = event.channel;\n      dc.current.binaryType = \"arraybuffer\";\n\n      let buffers = [];\n\n      dc.current.onopen = () => console.log(\"Data channel open\");\n\n      dc.current.onmessage = (e) => {\n        if (typeof e.data === \"string\") {\n          // Control message, parse JSON for done + filename\n          try {\n            const msg = JSON.parse(e.data);\n            if (msg.done) {\n              console.log(\"File transfer complete:\", msg.fileName);\n              const blob = new Blob(buffers);\n              const url = URL.createObjectURL(blob);\n              setDownloadUrl(url);\n              setFileName(msg.fileName);\n              buffers = [];\n            }\n          } catch (err) {\n            console.error(\"Failed parsing data channel message:\", err);\n          }\n        } else {\n          // Binary chunk received\n          buffers.push(e.data);\n          console.log(\"Received chunk:\", e.data.byteLength, \"bytes\");\n        }\n      };\n\n      dc.current.onclose = () => console.log(\"Data channel closed\");\n    };\n\n    pc.current.onconnectionstatechange = () => {\n      console.log(\"Connection state:\", pc.current.connectionState);\n    };\n  }\n\n  return (\n    <div>\n      <h2>Receiver</h2>\n      <p>Your ID (share this with sender): <b>{id}</b></p>\n      {downloadUrl && (\n        <a href={downloadUrl} download={fileName} onClick={() => setDownloadUrl(null)}>\n          Download {fileName}\n        </a>\n      )}\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}