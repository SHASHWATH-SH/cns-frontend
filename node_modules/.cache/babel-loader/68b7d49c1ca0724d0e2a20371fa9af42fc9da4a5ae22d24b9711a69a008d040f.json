{"ast":null,"code":"var _jsxFileName = \"E:\\\\secure-p2p-transfer\\\\frontend\\\\src\\\\Sender.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect, useMemo } from 'react';\nimport { io } from 'socket.io-client';\nimport { QRCodeCanvas } from 'qrcode.react';\nimport { generateKeyPair, exportPublicKey, importPublicKey, deriveAESKey, encryptData } from './cryptoUtils';\nimport './Sender.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction generateId() {\n  return Math.random().toString(36).slice(2, 8).toUpperCase();\n}\nexport default function Sender() {\n  _s();\n  const [id] = useState(generateId());\n  const [receiverId, setReceiverId] = useState('');\n  const [status, setStatus] = useState('Idle');\n  const [file, setFile] = useState(null);\n  const [showChunks, setShowChunks] = useState(false);\n  const pc = useRef(null);\n  const socket = useRef(null);\n  const dc = useRef(null);\n  const localKeyPair = useRef(null);\n  const aesKey = useRef(null);\n  const encryptedChunks = useRef([]);\n  const sessionLink = useMemo(() => `${window.location.origin}/receiver?id=${id}`, [id]);\n  useEffect(() => {\n    socket.current = io('https://192.168.168.36:8080', {\n      transports: ['websocket'],\n      rejectUnauthorized: false\n    });\n    socket.current.on('connect', () => {\n      socket.current.emit('register', id);\n      setStatus(`Registered as ${id}`);\n    });\n    socket.current.on('signal', async data => {\n      if (data.from !== receiverId) return;\n      if (data.signal.publicKey) {\n        const receiverPub = await importPublicKey(data.signal.publicKey);\n        aesKey.current = await deriveAESKey(localKeyPair.current.privateKey, receiverPub);\n      }\n      if (data.signal.sdp) {\n        await pc.current.setRemoteDescription(new RTCSessionDescription(data.signal));\n      } else if (data.signal.candidate) {\n        await pc.current.addIceCandidate(new RTCIceCandidate(data.signal.candidate));\n      }\n    });\n    return () => socket.current.disconnect();\n  }, [id, receiverId]);\n  const startConnection = async () => {\n    pc.current = new RTCPeerConnection();\n    localKeyPair.current = await generateKeyPair();\n    dc.current = pc.current.createDataChannel('file');\n    dc.current.binaryType = 'arraybuffer';\n    dc.current.onopen = () => setStatus('Data channel open. Ready to send file.');\n    pc.current.onicecandidate = event => {\n      if (event.candidate) {\n        socket.current.emit('signal', {\n          target: receiverId,\n          signal: {\n            candidate: event.candidate\n          }\n        });\n      }\n    };\n    const offer = await pc.current.createOffer();\n    await pc.current.setLocalDescription(offer);\n    socket.current.emit('signal', {\n      target: receiverId,\n      signal: pc.current.localDescription\n    });\n    const pubKey = await exportPublicKey(localKeyPair.current.publicKey);\n    socket.current.emit('signal', {\n      target: receiverId,\n      signal: {\n        publicKey: pubKey\n      }\n    });\n  };\n  const sendFile = async () => {\n    if (!file || !aesKey.current || !dc.current || dc.current.readyState !== 'open') {\n      alert('Check file, key, and data channel status.');\n      return;\n    }\n    const chunkSize = 16 * 1024;\n    const buffer = await file.arrayBuffer();\n    const totalChunks = Math.ceil(buffer.byteLength / chunkSize);\n    setStatus(`Encrypting ${totalChunks} chunks...`);\n    encryptedChunks.current = [];\n    for (let i = 0; i < totalChunks; i++) {\n      const chunk = buffer.slice(i * chunkSize, (i + 1) * chunkSize);\n      const {\n        encryptedData,\n        iv\n      } = await encryptData(aesKey.current, chunk);\n      encryptedChunks.current.push({\n        encryptedData,\n        iv\n      });\n      dc.current.send(iv);\n      dc.current.send(encryptedData);\n      setStatus(`Sending chunk ${i + 1} / ${totalChunks}`);\n    }\n    dc.current.send(JSON.stringify({\n      done: true,\n      fileName: file.name\n    }));\n    setStatus('File sent successfully!');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sender-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sender-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Sender\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"sender-id\",\n          children: [\"ID: \", id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sender-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"sender-input\",\n        placeholder: \"Enter Receiver ID\",\n        value: receiverId,\n        onChange: e => setReceiverId(e.target.value.toUpperCase())\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        className: \"sender-input\",\n        onChange: e => setFile(e.target.files[0])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"sender-button\",\n        onClick: startConnection,\n        disabled: !receiverId,\n        children: \"Connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"sender-button\",\n        onClick: sendFile,\n        disabled: !file || !receiverId,\n        children: \"Send File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"sender-button\",\n        onClick: () => setShowChunks(!showChunks),\n        children: showChunks ? 'Hide Encrypted Chunks' : 'Show Encrypted Chunks'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-indicator\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"session-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Session Link / QR:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: sessionLink\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(QRCodeCanvas, {\n        value: sessionLink\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), showChunks && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chunk-display\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Encrypted Chunks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n        children: encryptedChunks.current.map((chunk, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"IV:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 22\n            }, this), \" \", Buffer.from(chunk.iv).toString('hex')]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Encrypted Data:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 22\n            }, this), \" \", Buffer.from(chunk.encryptedData).toString('hex')]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n}\n_s(Sender, \"MCPwjJoaKt4xi7V0CvDICrxCCaQ=\");\n_c = Sender;\nvar _c;\n$RefreshReg$(_c, \"Sender\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useMemo","io","QRCodeCanvas","generateKeyPair","exportPublicKey","importPublicKey","deriveAESKey","encryptData","jsxDEV","_jsxDEV","generateId","Math","random","toString","slice","toUpperCase","Sender","_s","id","receiverId","setReceiverId","status","setStatus","file","setFile","showChunks","setShowChunks","pc","socket","dc","localKeyPair","aesKey","encryptedChunks","sessionLink","window","location","origin","current","transports","rejectUnauthorized","on","emit","data","from","signal","publicKey","receiverPub","privateKey","sdp","setRemoteDescription","RTCSessionDescription","candidate","addIceCandidate","RTCIceCandidate","disconnect","startConnection","RTCPeerConnection","createDataChannel","binaryType","onopen","onicecandidate","event","target","offer","createOffer","setLocalDescription","localDescription","pubKey","sendFile","readyState","alert","chunkSize","buffer","arrayBuffer","totalChunks","ceil","byteLength","i","chunk","encryptedData","iv","push","send","JSON","stringify","done","fileName","name","className","children","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","files","onClick","disabled","map","index","Buffer","_c","$RefreshReg$"],"sources":["E:/secure-p2p-transfer/frontend/src/Sender.js"],"sourcesContent":["import React, { useState, useRef, useEffect, useMemo } from 'react';\nimport { io } from 'socket.io-client';\nimport { QRCodeCanvas } from 'qrcode.react';\nimport {\n  generateKeyPair,\n  exportPublicKey,\n  importPublicKey,\n  deriveAESKey,\n  encryptData\n} from './cryptoUtils';\nimport './Sender.css';\n\nfunction generateId() {\n  return Math.random().toString(36).slice(2, 8).toUpperCase();\n}\n\nexport default function Sender() {\n  const [id] = useState(generateId());\n  const [receiverId, setReceiverId] = useState('');\n  const [status, setStatus] = useState('Idle');\n  const [file, setFile] = useState(null);\n  const [showChunks, setShowChunks] = useState(false);\n  const pc = useRef(null);\n  const socket = useRef(null);\n  const dc = useRef(null);\n  const localKeyPair = useRef(null);\n  const aesKey = useRef(null);\n  const encryptedChunks = useRef([]);\n\n  const sessionLink = useMemo(() => `${window.location.origin}/receiver?id=${id}`, [id]);\n\n  useEffect(() => {\n    socket.current = io('https://192.168.168.36:8080', {\n      transports: ['websocket'],\n      rejectUnauthorized: false,\n    });\n\n    socket.current.on('connect', () => {\n      socket.current.emit('register', id);\n      setStatus(`Registered as ${id}`);\n    });\n\n    socket.current.on('signal', async (data) => {\n      if (data.from !== receiverId) return;\n\n      if (data.signal.publicKey) {\n        const receiverPub = await importPublicKey(data.signal.publicKey);\n        aesKey.current = await deriveAESKey(localKeyPair.current.privateKey, receiverPub);\n      }\n\n      if (data.signal.sdp) {\n        await pc.current.setRemoteDescription(new RTCSessionDescription(data.signal));\n      } else if (data.signal.candidate) {\n        await pc.current.addIceCandidate(new RTCIceCandidate(data.signal.candidate));\n      }\n    });\n\n    return () => socket.current.disconnect();\n  }, [id, receiverId]);\n\n  const startConnection = async () => {\n    pc.current = new RTCPeerConnection();\n    localKeyPair.current = await generateKeyPair();\n\n    dc.current = pc.current.createDataChannel('file');\n    dc.current.binaryType = 'arraybuffer';\n\n    dc.current.onopen = () => setStatus('Data channel open. Ready to send file.');\n\n    pc.current.onicecandidate = (event) => {\n      if (event.candidate) {\n        socket.current.emit('signal', {\n          target: receiverId,\n          signal: { candidate: event.candidate },\n        });\n      }\n    };\n\n    const offer = await pc.current.createOffer();\n    await pc.current.setLocalDescription(offer);\n    socket.current.emit('signal', {\n      target: receiverId,\n      signal: pc.current.localDescription,\n    });\n\n    const pubKey = await exportPublicKey(localKeyPair.current.publicKey);\n    socket.current.emit('signal', {\n      target: receiverId,\n      signal: { publicKey: pubKey },\n    });\n  };\n\n  const sendFile = async () => {\n    if (!file || !aesKey.current || !dc.current || dc.current.readyState !== 'open') {\n      alert('Check file, key, and data channel status.');\n      return;\n    }\n\n    const chunkSize = 16 * 1024;\n    const buffer = await file.arrayBuffer();\n    const totalChunks = Math.ceil(buffer.byteLength / chunkSize);\n    setStatus(`Encrypting ${totalChunks} chunks...`);\n\n    encryptedChunks.current = [];\n\n    for (let i = 0; i < totalChunks; i++) {\n      const chunk = buffer.slice(i * chunkSize, (i + 1) * chunkSize);\n      const { encryptedData, iv } = await encryptData(aesKey.current, chunk);\n      encryptedChunks.current.push({ encryptedData, iv });\n\n      dc.current.send(iv);\n      dc.current.send(encryptedData);\n      setStatus(`Sending chunk ${i + 1} / ${totalChunks}`);\n    }\n\n    dc.current.send(JSON.stringify({ done: true, fileName: file.name }));\n    setStatus('File sent successfully!');\n  };\n\n  return (\n    <div className=\"sender-container\">\n      <div className=\"sender-header\">\n        <h2>\n          Sender\n          <span className=\"sender-id\">ID: {id}</span>\n        </h2>\n      </div>\n\n      <div className=\"sender-controls\">\n        <input\n          type=\"text\"\n          className=\"sender-input\"\n          placeholder=\"Enter Receiver ID\"\n          value={receiverId}\n          onChange={e => setReceiverId(e.target.value.toUpperCase())}\n        />\n        <input\n          type=\"file\"\n          className=\"sender-input\"\n          onChange={e => setFile(e.target.files[0])}\n        />\n        <button\n          className=\"sender-button\"\n          onClick={startConnection}\n          disabled={!receiverId}\n        >\n          Connect\n        </button>\n        <button\n          className=\"sender-button\"\n          onClick={sendFile}\n          disabled={!file || !receiverId}\n        >\n          Send File\n        </button>\n        <button\n          className=\"sender-button\"\n          onClick={() => setShowChunks(!showChunks)}\n        >\n          {showChunks ? 'Hide Encrypted Chunks' : 'Show Encrypted Chunks'}\n        </button>\n      </div>\n\n      <div className=\"status-indicator\">{status}</div>\n\n      <div className=\"session-info\">\n        <h4>Session Link / QR:</h4>\n        <p>{sessionLink}</p>\n        <QRCodeCanvas value={sessionLink} />\n      </div>\n\n      {showChunks && (\n        <div className=\"chunk-display\">\n          <h3>Encrypted Chunks</h3>\n          <ol>\n            {encryptedChunks.current.map((chunk, index) => (\n              <li key={index}>\n                <div><strong>IV:</strong> {Buffer.from(chunk.iv).toString('hex')}</div>\n                <div><strong>Encrypted Data:</strong> {Buffer.from(chunk.encryptedData).toString('hex')}</div>\n              </li>\n            ))}\n          </ol>\n        </div>\n      )}\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}