{"ast":null,"code":"var _jsxFileName = \"E:\\\\secure-p2p-transfer\\\\frontend\\\\src\\\\Sender.js\",\n  _s = $RefreshSig$();\n// Sender.js\nimport React, { useState, useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction generateId() {\n  return Math.random().toString(36).slice(2, 8).toUpperCase();\n}\nexport default function Sender() {\n  _s();\n  const [id] = useState(generateId());\n  const [receiverId, setReceiverId] = useState('');\n  const [status, setStatus] = useState('Idle');\n  const pc = useRef(null);\n  const ws = useRef(null);\n  const dc = useRef(null);\n  const fileReader = useRef(null);\n  useEffect(() => {\n    ws.current = new WebSocket('wss://172.17.1.95:8080');\n    ws.current.onopen = () => {\n      ws.current.send(JSON.stringify({\n        type: 'register',\n        id\n      }));\n      setStatus(`Registered as ${id}`);\n    };\n    ws.current.onmessage = async event => {\n      const data = JSON.parse(event.data);\n      if (data.type === 'signal' && data.from === receiverId) {\n        if (data.signal.sdp) {\n          await pc.current.setRemoteDescription(new RTCSessionDescription(data.signal));\n          if (data.signal.type === 'offer') {\n            const answer = await pc.current.createAnswer();\n            await pc.current.setLocalDescription(answer);\n            ws.current.send(JSON.stringify({\n              type: 'signal',\n              target: receiverId,\n              signal: pc.current.localDescription\n            }));\n          }\n        } else if (data.signal.candidate) {\n          try {\n            await pc.current.addIceCandidate(new RTCIceCandidate(data.signal.candidate));\n          } catch (e) {\n            console.error('Error adding ice candidate:', e);\n          }\n        }\n      }\n    };\n    return () => ws.current.close();\n  }, [id, receiverId]);\n  const startConnection = () => {\n    pc.current = new RTCPeerConnection();\n    dc.current = pc.current.createDataChannel('fileTransfer');\n    dc.current.onopen = () => {\n      setStatus('Data channel open. Ready to send file.');\n    };\n    dc.current.onclose = () => {\n      setStatus('Data channel closed.');\n    };\n    dc.current.onerror = error => {\n      console.error('Data channel error:', error);\n    };\n    pc.current.onicecandidate = event => {\n      if (event.candidate) {\n        ws.current.send(JSON.stringify({\n          type: 'signal',\n          target: receiverId,\n          signal: {\n            candidate: event.candidate\n          }\n        }));\n      }\n    };\n    pc.current.createOffer().then(offer => {\n      return pc.current.setLocalDescription(offer);\n    }).then(() => {\n      ws.current.send(JSON.stringify({\n        type: 'signal',\n        target: receiverId,\n        signal: pc.current.localDescription\n      }));\n      setStatus('Offer sent to receiver.');\n    });\n  };\n  const sendFile = file => {\n    if (!dc.current || dc.current.readyState !== 'open') {\n      alert('Data channel is not open yet!');\n      return;\n    }\n    const chunkSize = 16384;\n    let offset = 0;\n    fileReader.current = new FileReader();\n    fileReader.current.onload = e => {\n      dc.current.send(e.target.result);\n      offset += e.target.result.byteLength;\n      setStatus(`Sending: ${Math.min(100, (offset / file.size * 100).toFixed(2))}%`);\n      if (offset < file.size) {\n        readSlice(offset);\n      } else {\n        dc.current.send(JSON.stringify({\n          done: true,\n          fileName: file.name\n        }));\n        setStatus('File sent.');\n      }\n    };\n    const readSlice = o => {\n      const slice = file.slice(o, o + chunkSize);\n      fileReader.current.readAsArrayBuffer(slice);\n    };\n    readSlice(0);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Sender (Your ID: \", id, \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter Receiver ID\",\n      value: receiverId,\n      onChange: e => setReceiverId(e.target.value.toUpperCase())\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startConnection,\n      disabled: !receiverId,\n      children: \"Connect\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: e => sendFile(e.target.files[0]),\n      disabled: !dc.current || dc.current.readyState !== 'open'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Status: \", status]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n}\n_s(Sender, \"p9xT3liIMfhNv+SpZOi4sQlspOQ=\");\n_c = Sender;\nvar _c;\n$RefreshReg$(_c, \"Sender\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","generateId","Math","random","toString","slice","toUpperCase","Sender","_s","id","receiverId","setReceiverId","status","setStatus","pc","ws","dc","fileReader","current","WebSocket","onopen","send","JSON","stringify","type","onmessage","event","data","parse","from","signal","sdp","setRemoteDescription","RTCSessionDescription","answer","createAnswer","setLocalDescription","target","localDescription","candidate","addIceCandidate","RTCIceCandidate","e","console","error","close","startConnection","RTCPeerConnection","createDataChannel","onclose","onerror","onicecandidate","createOffer","then","offer","sendFile","file","readyState","alert","chunkSize","offset","FileReader","onload","result","byteLength","min","size","toFixed","readSlice","done","fileName","name","o","readAsArrayBuffer","children","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","onClick","disabled","files","_c","$RefreshReg$"],"sources":["E:/secure-p2p-transfer/frontend/src/Sender.js"],"sourcesContent":["// Sender.js\nimport React, { useState, useRef, useEffect } from 'react';\n\nfunction generateId() {\n  return Math.random().toString(36).slice(2, 8).toUpperCase();\n}\n\nexport default function Sender() {\n  const [id] = useState(generateId());\n  const [receiverId, setReceiverId] = useState('');\n  const [status, setStatus] = useState('Idle');\n  const pc = useRef(null);\n  const ws = useRef(null);\n  const dc = useRef(null);\n  const fileReader = useRef(null);\n\n  useEffect(() => {\n    ws.current = new WebSocket('wss://172.17.1.95:8080');\n    ws.current.onopen = () => {\n      ws.current.send(JSON.stringify({ type: 'register', id }));\n      setStatus(`Registered as ${id}`);\n    };\n\n    ws.current.onmessage = async (event) => {\n      const data = JSON.parse(event.data);\n      if (data.type === 'signal' && data.from === receiverId) {\n        if (data.signal.sdp) {\n          await pc.current.setRemoteDescription(new RTCSessionDescription(data.signal));\n          if (data.signal.type === 'offer') {\n            const answer = await pc.current.createAnswer();\n            await pc.current.setLocalDescription(answer);\n            ws.current.send(JSON.stringify({\n              type: 'signal',\n              target: receiverId,\n              signal: pc.current.localDescription,\n            }));\n          }\n        } else if (data.signal.candidate) {\n          try {\n            await pc.current.addIceCandidate(new RTCIceCandidate(data.signal.candidate));\n          } catch (e) {\n            console.error('Error adding ice candidate:', e);\n          }\n        }\n      }\n    };\n\n    return () => ws.current.close();\n  }, [id, receiverId]);\n\n  const startConnection = () => {\n    pc.current = new RTCPeerConnection();\n\n    dc.current = pc.current.createDataChannel('fileTransfer');\n\n    dc.current.onopen = () => {\n      setStatus('Data channel open. Ready to send file.');\n    };\n\n    dc.current.onclose = () => {\n      setStatus('Data channel closed.');\n    };\n\n    dc.current.onerror = (error) => {\n      console.error('Data channel error:', error);\n    };\n\n    pc.current.onicecandidate = (event) => {\n      if (event.candidate) {\n        ws.current.send(JSON.stringify({\n          type: 'signal',\n          target: receiverId,\n          signal: { candidate: event.candidate },\n        }));\n      }\n    };\n\n    pc.current.createOffer().then(offer => {\n      return pc.current.setLocalDescription(offer);\n    }).then(() => {\n      ws.current.send(JSON.stringify({\n        type: 'signal',\n        target: receiverId,\n        signal: pc.current.localDescription,\n      }));\n      setStatus('Offer sent to receiver.');\n    });\n  };\n\n  const sendFile = (file) => {\n    if (!dc.current || dc.current.readyState !== 'open') {\n      alert('Data channel is not open yet!');\n      return;\n    }\n\n    const chunkSize = 16384;\n    let offset = 0;\n\n    fileReader.current = new FileReader();\n\n    fileReader.current.onload = (e) => {\n      dc.current.send(e.target.result);\n      offset += e.target.result.byteLength;\n      setStatus(`Sending: ${Math.min(100, ((offset / file.size) * 100).toFixed(2))}%`);\n\n      if (offset < file.size) {\n        readSlice(offset);\n      } else {\n        dc.current.send(JSON.stringify({ done: true, fileName: file.name }));\n        setStatus('File sent.');\n      }\n    };\n\n    const readSlice = (o) => {\n      const slice = file.slice(o, o + chunkSize);\n      fileReader.current.readAsArrayBuffer(slice);\n    };\n\n    readSlice(0);\n  };\n\n  return (\n    <div>\n      <h2>Sender (Your ID: {id})</h2>\n      <input\n        type=\"text\"\n        placeholder=\"Enter Receiver ID\"\n        value={receiverId}\n        onChange={(e) => setReceiverId(e.target.value.toUpperCase())}\n      />\n      <button onClick={startConnection} disabled={!receiverId}>Connect</button>\n      <br />\n      <input\n        type=\"file\"\n        onChange={e => sendFile(e.target.files[0])}\n        disabled={!dc.current || dc.current.readyState !== 'open'}\n      />\n      <p>Status: {status}</p>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}