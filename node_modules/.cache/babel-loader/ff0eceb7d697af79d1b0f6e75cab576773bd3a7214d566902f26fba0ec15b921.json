{"ast":null,"code":"var _jsxFileName = \"E:\\\\secure-p2p-transfer\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport QRCode from \"qrcode.react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SIGNAL_SERVER = \"ws://localhost:8080\";\nfunction generateId() {\n  return Math.random().toString(36).substring(2, 10);\n}\nfunction App() {\n  _s();\n  const [mode, setMode] = useState(null); // \"sender\" or \"receiver\"\n  const [id] = useState(generateId());\n  const [peerId, setPeerId] = useState(\"\");\n  const [ws, setWs] = useState(null);\n  const [remoteDesc, setRemoteDesc] = useState(\"\");\n  const [connection, setConnection] = useState(null);\n  const [dataChannel, setDataChannel] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [file, setFile] = useState(null);\n  const peerConnection = useRef(null);\n  useEffect(() => {\n    if (!mode) return;\n    const socket = new WebSocket(SIGNAL_SERVER);\n    socket.onopen = () => {\n      socket.send(JSON.stringify({\n        type: \"register\",\n        id\n      }));\n    };\n    socket.onmessage = msg => {\n      const data = JSON.parse(msg.data);\n      if (data.to !== id) return;\n      if (data.type === \"offer\") {\n        peerConnection.current.setRemoteDescription(new RTCSessionDescription(data.sdp)).then(() => {\n          return peerConnection.current.createAnswer();\n        }).then(answer => {\n          return peerConnection.current.setLocalDescription(answer);\n        }).then(() => {\n          socket.send(JSON.stringify({\n            type: \"answer\",\n            sdp: peerConnection.current.localDescription,\n            to: data.from,\n            from: id\n          }));\n        });\n      } else if (data.type === \"answer\") {\n        peerConnection.current.setRemoteDescription(new RTCSessionDescription(data.sdp));\n      } else if (data.type === \"candidate\") {\n        if (data.candidate) {\n          peerConnection.current.addIceCandidate(new RTCIceCandidate(data.candidate));\n        }\n      }\n    };\n    setWs(socket);\n\n    // Setup WebRTC connection\n    peerConnection.current = new RTCPeerConnection({\n      iceServers: [{\n        urls: \"stun:stun.l.google.com:19302\"\n      }]\n    });\n    peerConnection.current.onicecandidate = event => {\n      if (event.candidate) {\n        socket.send(JSON.stringify({\n          type: \"candidate\",\n          candidate: event.candidate,\n          to: peerId,\n          from: id\n        }));\n      }\n    };\n    peerConnection.current.onconnectionstatechange = () => {\n      if (peerConnection.current.connectionState === \"connected\") {\n        setConnection(true);\n      }\n    };\n    if (mode === \"sender\") {\n      const channel = peerConnection.current.createDataChannel(\"fileTransfer\");\n      channel.onopen = () => setDataChannel(channel);\n      channel.onmessage = e => setMessages(prev => [...prev, e.data]);\n      setDataChannel(channel);\n      peerConnection.current.createOffer().then(offer => {\n        return peerConnection.current.setLocalDescription(offer);\n      }).then(() => {\n        socket.send(JSON.stringify({\n          type: \"offer\",\n          sdp: peerConnection.current.localDescription,\n          to: peerId,\n          from: id\n        }));\n      });\n    } else if (mode === \"receiver\") {\n      peerConnection.current.ondatachannel = event => {\n        const channel = event.channel;\n        setDataChannel(channel);\n        channel.onopen = () => console.log(\"Data channel open\");\n        channel.onmessage = e => setMessages(prev => [...prev, e.data]);\n      };\n    }\n    return () => {\n      if (peerConnection.current) peerConnection.current.close();\n      if (socket) socket.close();\n    };\n  }, [mode, peerId, id]);\n\n  // Send file as text chunk (simple demo, not optimal)\n  const sendFile = () => {\n    if (!file || !dataChannel) return;\n    const reader = new FileReader();\n    reader.onload = () => {\n      const text = reader.result;\n      dataChannel.send(text);\n      alert(\"File sent as text data!\");\n    };\n    reader.readAsText(file);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: 20\n    },\n    children: !mode ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Secure P2P File Transfer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setMode(\"sender\"),\n        children: \"I'm Sender\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setMode(\"receiver\"),\n        children: \"I'm Receiver\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [mode === \"sender\" ? \"Sender\" : \"Receiver\", \" Mode\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Your ID: \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [mode === \"sender\" ? \"Enter Receiver ID:\" : \"Enter Sender ID:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          value: peerId,\n          onChange: e => setPeerId(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          if (mode === \"sender\") {\n            // Already created offer and sent on ws on peerId change\n          }\n        },\n        children: \"Connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this), mode === \"sender\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onChange: e => setFile(e.target.files[0])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendFile,\n          disabled: !dataChannel || dataChannel.readyState !== \"open\",\n          children: \"Send File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Messages / Received file content:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          whiteSpace: \"pre-wrap\",\n          border: \"1px solid #ccc\",\n          height: 200,\n          overflowY: \"auto\"\n        },\n        children: messages.map((m, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: m\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 37\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"L3oRgIBrZ1/fyOkHErxDiJWmiTc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useRef","useState","QRCode","jsxDEV","_jsxDEV","Fragment","_Fragment","SIGNAL_SERVER","generateId","Math","random","toString","substring","App","_s","mode","setMode","id","peerId","setPeerId","ws","setWs","remoteDesc","setRemoteDesc","connection","setConnection","dataChannel","setDataChannel","messages","setMessages","file","setFile","peerConnection","socket","WebSocket","onopen","send","JSON","stringify","type","onmessage","msg","data","parse","to","current","setRemoteDescription","RTCSessionDescription","sdp","then","createAnswer","answer","setLocalDescription","localDescription","from","candidate","addIceCandidate","RTCIceCandidate","RTCPeerConnection","iceServers","urls","onicecandidate","event","onconnectionstatechange","connectionState","channel","createDataChannel","e","prev","createOffer","offer","ondatachannel","console","log","close","sendFile","reader","FileReader","onload","text","result","alert","readAsText","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","value","onChange","target","files","disabled","readyState","whiteSpace","border","height","overflowY","map","m","i","_c","$RefreshReg$"],"sources":["E:/secure-p2p-transfer/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport QRCode from \"qrcode.react\";\n\nconst SIGNAL_SERVER = \"ws://localhost:8080\";\n\nfunction generateId() {\n  return Math.random().toString(36).substring(2, 10);\n}\n\nfunction App() {\n  const [mode, setMode] = useState(null); // \"sender\" or \"receiver\"\n  const [id] = useState(generateId());\n  const [peerId, setPeerId] = useState(\"\");\n  const [ws, setWs] = useState(null);\n  const [remoteDesc, setRemoteDesc] = useState(\"\");\n  const [connection, setConnection] = useState(null);\n  const [dataChannel, setDataChannel] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [file, setFile] = useState(null);\n\n  const peerConnection = useRef(null);\n\n  useEffect(() => {\n    if (!mode) return;\n\n    const socket = new WebSocket(SIGNAL_SERVER);\n    socket.onopen = () => {\n      socket.send(JSON.stringify({ type: \"register\", id }));\n    };\n\n    socket.onmessage = (msg) => {\n      const data = JSON.parse(msg.data);\n\n      if (data.to !== id) return;\n\n      if (data.type === \"offer\") {\n        peerConnection.current.setRemoteDescription(new RTCSessionDescription(data.sdp)).then(() => {\n          return peerConnection.current.createAnswer();\n        }).then(answer => {\n          return peerConnection.current.setLocalDescription(answer);\n        }).then(() => {\n          socket.send(JSON.stringify({ type: \"answer\", sdp: peerConnection.current.localDescription, to: data.from, from: id }));\n        });\n      } else if (data.type === \"answer\") {\n        peerConnection.current.setRemoteDescription(new RTCSessionDescription(data.sdp));\n      } else if (data.type === \"candidate\") {\n        if (data.candidate) {\n          peerConnection.current.addIceCandidate(new RTCIceCandidate(data.candidate));\n        }\n      }\n    };\n\n    setWs(socket);\n\n    // Setup WebRTC connection\n    peerConnection.current = new RTCPeerConnection({\n      iceServers: [{ urls: \"stun:stun.l.google.com:19302\" }],\n    });\n\n    peerConnection.current.onicecandidate = (event) => {\n      if (event.candidate) {\n        socket.send(JSON.stringify({ type: \"candidate\", candidate: event.candidate, to: peerId, from: id }));\n      }\n    };\n\n    peerConnection.current.onconnectionstatechange = () => {\n      if (peerConnection.current.connectionState === \"connected\") {\n        setConnection(true);\n      }\n    };\n\n    if (mode === \"sender\") {\n      const channel = peerConnection.current.createDataChannel(\"fileTransfer\");\n\n      channel.onopen = () => setDataChannel(channel);\n      channel.onmessage = (e) => setMessages(prev => [...prev, e.data]);\n\n      setDataChannel(channel);\n\n      peerConnection.current.createOffer().then(offer => {\n        return peerConnection.current.setLocalDescription(offer);\n      }).then(() => {\n        socket.send(JSON.stringify({ type: \"offer\", sdp: peerConnection.current.localDescription, to: peerId, from: id }));\n      });\n    } else if (mode === \"receiver\") {\n      peerConnection.current.ondatachannel = (event) => {\n        const channel = event.channel;\n        setDataChannel(channel);\n        channel.onopen = () => console.log(\"Data channel open\");\n        channel.onmessage = (e) => setMessages(prev => [...prev, e.data]);\n      };\n    }\n\n    return () => {\n      if (peerConnection.current) peerConnection.current.close();\n      if (socket) socket.close();\n    };\n  }, [mode, peerId, id]);\n\n  // Send file as text chunk (simple demo, not optimal)\n  const sendFile = () => {\n    if (!file || !dataChannel) return;\n\n    const reader = new FileReader();\n    reader.onload = () => {\n      const text = reader.result;\n      dataChannel.send(text);\n      alert(\"File sent as text data!\");\n    };\n    reader.readAsText(file);\n  };\n\n  return (\n    <div style={{ padding: 20 }}>\n      {!mode ? (\n        <>\n          <h1>Secure P2P File Transfer</h1>\n          <button onClick={() => setMode(\"sender\")}>I'm Sender</button>\n          <button onClick={() => setMode(\"receiver\")}>I'm Receiver</button>\n        </>\n      ) : (\n        <>\n          <h2>{mode === \"sender\" ? \"Sender\" : \"Receiver\"} Mode</h2>\n          <p>Your ID: <b>{id}</b></p>\n          <label>\n            {mode === \"sender\" ? \"Enter Receiver ID:\" : \"Enter Sender ID:\"}\n            <input value={peerId} onChange={e => setPeerId(e.target.value)} />\n          </label>\n          <br />\n          <button onClick={() => {\n            if (mode === \"sender\") {\n              // Already created offer and sent on ws on peerId change\n            }\n          }}>Connect</button>\n\n          {mode === \"sender\" && (\n            <>\n              <input type=\"file\" onChange={e => setFile(e.target.files[0])} />\n              <button onClick={sendFile} disabled={!dataChannel || dataChannel.readyState !== \"open\"}>Send File</button>\n            </>\n          )}\n\n          <h3>Messages / Received file content:</h3>\n          <div style={{ whiteSpace: \"pre-wrap\", border: \"1px solid #ccc\", height: 200, overflowY: \"auto\" }}>\n            {messages.map((m, i) => <div key={i}>{m}</div>)}\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}